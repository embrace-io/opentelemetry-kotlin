package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'rpc'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object RpcAttributes {
  

    /**
    * <p>The <a href="https://connectrpc.com//docs/protocol/#error-codes">error codes</a> of the Connect request. Error codes are always string values.</p>
    */
    @IncubatingApi
    const val RPC_CONNECT_RPC_ERROR_CODE: String = "rpc.connect_rpc.error_code"

    /**
    * <p>Connect request metadata, <c><key></c> being the normalized Connect Metadata key (lowercase), the value being the metadata values.</p>
    * <p>Notes:</p>
    * <p>Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
    * Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.</p>
    * <p>For example, a property <c>my-custom-key</c> with value <c>["1.2.3.4", "1.2.3.5"]</c> SHOULD be recorded as
    * the <c>rpc.connect_rpc.request.metadata.my-custom-key</c> attribute with value <c>["1.2.3.4", "1.2.3.5"]</c></p>
    */
    @IncubatingApi
    const val RPC_CONNECT_RPC_REQUEST_METADATA: String = "rpc.connect_rpc.request.metadata"

    /**
    * <p>Connect response metadata, <c><key></c> being the normalized Connect Metadata key (lowercase), the value being the metadata values.</p>
    * <p>Notes:</p>
    * <p>Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
    * Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.</p>
    * <p>For example, a property <c>my-custom-key</c> with value <c>"attribute_value"</c> SHOULD be recorded as
    * the <c>rpc.connect_rpc.response.metadata.my-custom-key</c> attribute with value <c>["attribute_value"]</c></p>
    */
    @IncubatingApi
    const val RPC_CONNECT_RPC_RESPONSE_METADATA: String = "rpc.connect_rpc.response.metadata"

    /**
    * <p>gRPC request metadata, <c><key></c> being the normalized gRPC Metadata key (lowercase), the value being the metadata values.</p>
    * <p>Notes:</p>
    * <p>Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
    * Including all request metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.</p>
    * <p>For example, a property <c>my-custom-key</c> with value <c>["1.2.3.4", "1.2.3.5"]</c> SHOULD be recorded as
    * <c>rpc.grpc.request.metadata.my-custom-key</c> attribute with value <c>["1.2.3.4", "1.2.3.5"]</c></p>
    */
    @IncubatingApi
    const val RPC_GRPC_REQUEST_METADATA: String = "rpc.grpc.request.metadata"

    /**
    * <p>gRPC response metadata, <c><key></c> being the normalized gRPC Metadata key (lowercase), the value being the metadata values.</p>
    * <p>Notes:</p>
    * <p>Instrumentations SHOULD require an explicit configuration of which metadata values are to be captured.
    * Including all response metadata values can be a security risk - explicit configuration helps avoid leaking sensitive information.</p>
    * <p>For example, a property <c>my-custom-key</c> with value <c>["attribute_value"]</c> SHOULD be recorded as
    * the <c>rpc.grpc.response.metadata.my-custom-key</c> attribute with value <c>["attribute_value"]</c></p>
    */
    @IncubatingApi
    const val RPC_GRPC_RESPONSE_METADATA: String = "rpc.grpc.response.metadata"

    /**
    * <p>The <a href="https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md">numeric status code</a> of the gRPC request.</p>
    */
    @IncubatingApi
    const val RPC_GRPC_STATUS_CODE: String = "rpc.grpc.status_code"

    /**
    * <p><c>error.code</c> property of response if it is an error response.</p>
    */
    @IncubatingApi
    const val RPC_JSONRPC_ERROR_CODE: String = "rpc.jsonrpc.error_code"

    /**
    * <p><c>error.message</c> property of response if it is an error response.</p>
    */
    @IncubatingApi
    const val RPC_JSONRPC_ERROR_MESSAGE: String = "rpc.jsonrpc.error_message"

    /**
    * <p><c>id</c> property of request or response. Since protocol allows id to be int, string, <c>null</c> or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of <c>null</c> value. Omit entirely if this is a notification.</p>
    */
    @IncubatingApi
    const val RPC_JSONRPC_REQUEST_ID: String = "rpc.jsonrpc.request_id"

    /**
    * <p>Protocol version as in <c>jsonrpc</c> property of request/response. Since JSON-RPC 1.0 doesn't specify this, the value can be omitted.</p>
    */
    @IncubatingApi
    const val RPC_JSONRPC_VERSION: String = "rpc.jsonrpc.version"

    /**
    * <p>Compressed size of the message in bytes.</p>
    */
    @IncubatingApi
    const val RPC_MESSAGE_COMPRESSED_SIZE: String = "rpc.message.compressed_size"

    /**
    * <p>MUST be calculated as two different counters starting from <c>1</c> one for sent messages and one for received message.</p>
    * <p>Notes:</p>
    * <p>This way we guarantee that the values will be consistent between different implementations.</p>
    */
    @IncubatingApi
    const val RPC_MESSAGE_ID: String = "rpc.message.id"

    /**
    * <p>Whether this is a received or sent message.</p>
    */
    @IncubatingApi
    const val RPC_MESSAGE_TYPE: String = "rpc.message.type"

    /**
    * <p>Uncompressed size of the message in bytes.</p>
    */
    @IncubatingApi
    const val RPC_MESSAGE_UNCOMPRESSED_SIZE: String = "rpc.message.uncompressed_size"

    /**
    * <p>The name of the (logical) method being called, must be equal to the $method part in the span name.</p>
    * <p>Notes:</p>
    * <p>This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The <c>code.function.name</c> attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).</p>
    */
    @IncubatingApi
    const val RPC_METHOD: String = "rpc.method"

    /**
    * <p>The full (logical) name of the service being called, including its package name, if applicable.</p>
    * <p>Notes:</p>
    * <p>This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The <c>code.namespace</c> attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).</p>
    */
    @IncubatingApi
    const val RPC_SERVICE: String = "rpc.service"

    /**
    * <p>A string identifying the remoting system. See below for a list of well-known identifiers.</p>
    */
    @IncubatingApi
    const val RPC_SYSTEM: String = "rpc.system"

    /**
    * <p>RPC_CONNECT_RPC_ERROR_CODE</p>
    */
    @IncubatingApi
    enum class RpcConnectRpcErrorCodeValues(val value: String) {

        /**
        * <p>cancelled.</p>
        */
        CANCELLED("cancelled"),

        /**
        * <p>unknown.</p>
        */
        UNKNOWN("unknown"),

        /**
        * <p>invalid_argument.</p>
        */
        INVALID_ARGUMENT("invalid_argument"),

        /**
        * <p>deadline_exceeded.</p>
        */
        DEADLINE_EXCEEDED("deadline_exceeded"),

        /**
        * <p>not_found.</p>
        */
        NOT_FOUND("not_found"),

        /**
        * <p>already_exists.</p>
        */
        ALREADY_EXISTS("already_exists"),

        /**
        * <p>permission_denied.</p>
        */
        PERMISSION_DENIED("permission_denied"),

        /**
        * <p>resource_exhausted.</p>
        */
        RESOURCE_EXHAUSTED("resource_exhausted"),

        /**
        * <p>failed_precondition.</p>
        */
        FAILED_PRECONDITION("failed_precondition"),

        /**
        * <p>aborted.</p>
        */
        ABORTED("aborted"),

        /**
        * <p>out_of_range.</p>
        */
        OUT_OF_RANGE("out_of_range"),

        /**
        * <p>unimplemented.</p>
        */
        UNIMPLEMENTED("unimplemented"),

        /**
        * <p>internal.</p>
        */
        INTERNAL("internal"),

        /**
        * <p>unavailable.</p>
        */
        UNAVAILABLE("unavailable"),

        /**
        * <p>data_loss.</p>
        */
        DATA_LOSS("data_loss"),

        /**
        * <p>unauthenticated.</p>
        */
        UNAUTHENTICATED("unauthenticated"),
    }

    /**
    * <p>RPC_GRPC_STATUS_CODE</p>
    */
    @IncubatingApi
    enum class RpcGrpcStatusCodeValues(val value: Int) {

        /**
        * <p>OK</p>
        */
        OK(0),

        /**
        * <p>CANCELLED</p>
        */
        CANCELLED(1),

        /**
        * <p>UNKNOWN</p>
        */
        UNKNOWN(2),

        /**
        * <p>INVALID_ARGUMENT</p>
        */
        INVALID_ARGUMENT(3),

        /**
        * <p>DEADLINE_EXCEEDED</p>
        */
        DEADLINE_EXCEEDED(4),

        /**
        * <p>NOT_FOUND</p>
        */
        NOT_FOUND(5),

        /**
        * <p>ALREADY_EXISTS</p>
        */
        ALREADY_EXISTS(6),

        /**
        * <p>PERMISSION_DENIED</p>
        */
        PERMISSION_DENIED(7),

        /**
        * <p>RESOURCE_EXHAUSTED</p>
        */
        RESOURCE_EXHAUSTED(8),

        /**
        * <p>FAILED_PRECONDITION</p>
        */
        FAILED_PRECONDITION(9),

        /**
        * <p>ABORTED</p>
        */
        ABORTED(10),

        /**
        * <p>OUT_OF_RANGE</p>
        */
        OUT_OF_RANGE(11),

        /**
        * <p>UNIMPLEMENTED</p>
        */
        UNIMPLEMENTED(12),

        /**
        * <p>INTERNAL</p>
        */
        INTERNAL(13),

        /**
        * <p>UNAVAILABLE</p>
        */
        UNAVAILABLE(14),

        /**
        * <p>DATA_LOSS</p>
        */
        DATA_LOSS(15),

        /**
        * <p>UNAUTHENTICATED</p>
        */
        UNAUTHENTICATED(16),
    }

    /**
    * <p>RPC_MESSAGE_TYPE</p>
    */
    @IncubatingApi
    enum class RpcMessageTypeValues(val value: String) {

        /**
        * <p>sent.</p>
        */
        SENT("SENT"),

        /**
        * <p>received.</p>
        */
        RECEIVED("RECEIVED"),
    }

    /**
    * <p>RPC_SYSTEM</p>
    */
    @IncubatingApi
    enum class RpcSystemValues(val value: String) {

        /**
        * <p>gRPC</p>
        */
        GRPC("grpc"),

        /**
        * <p>Java RMI</p>
        */
        JAVA_RMI("java_rmi"),

        /**
        * <p>.NET WCF</p>
        */
        DOTNET_WCF("dotnet_wcf"),

        /**
        * <p>Apache Dubbo</p>
        */
        APACHE_DUBBO("apache_dubbo"),

        /**
        * <p>Connect RPC</p>
        */
        CONNECT_RPC("connect_rpc"),
    }
}
