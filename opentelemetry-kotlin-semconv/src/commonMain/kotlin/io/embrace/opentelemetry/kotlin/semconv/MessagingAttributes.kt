package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'messaging'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object MessagingAttributes {
  

    /**
    * <p>The number of messages sent, received, or processed in the scope of the batching operation.</p>
    * <p>Notes:</p>
    * <p>Instrumentations SHOULD NOT set <c>messaging.batch.message_count</c> on spans that operate with a single message. When a messaging client library supports both batch and single-message API for the same operation, instrumentations SHOULD use <c>messaging.batch.message_count</c> for batching APIs and SHOULD NOT use it for single-message APIs.</p>
    */
    @IncubatingApi
    const val MESSAGING_BATCH_MESSAGE_COUNT: String = "messaging.batch.message_count"

    /**
    * <p>A unique identifier for the client that consumes or produces a message.</p>
    */
    @IncubatingApi
    const val MESSAGING_CLIENT_ID: String = "messaging.client.id"

    /**
    * <p>The name of the consumer group with which a consumer is associated.</p>
    * <p>Notes:</p>
    * <p>Semantic conventions for individual messaging systems SHOULD document whether <c>messaging.consumer.group.name</c> is applicable and what it means in the context of that system.</p>
    */
    @IncubatingApi
    const val MESSAGING_CONSUMER_GROUP_NAME: String = "messaging.consumer.group.name"

    /**
    * <p>A boolean that is true if the message destination is anonymous (could be unnamed or have auto-generated name).</p>
    */
    @IncubatingApi
    const val MESSAGING_DESTINATION_ANONYMOUS: String = "messaging.destination.anonymous"

    /**
    * <p>The message destination name</p>
    * <p>Notes:</p>
    * <p>Destination name SHOULD uniquely identify a specific queue, topic or other entity within the broker. If
    * the broker doesn't have such notion, the destination name SHOULD uniquely identify the broker.</p>
    */
    @IncubatingApi
    const val MESSAGING_DESTINATION_NAME: String = "messaging.destination.name"

    /**
    * <p>The identifier of the partition messages are sent to or received from, unique within the <c>messaging.destination.name</c>.</p>
    */
    @IncubatingApi
    const val MESSAGING_DESTINATION_PARTITION_ID: String = "messaging.destination.partition.id"

    /**
    * <p>The name of the destination subscription from which a message is consumed.</p>
    * <p>Notes:</p>
    * <p>Semantic conventions for individual messaging systems SHOULD document whether <c>messaging.destination.subscription.name</c> is applicable and what it means in the context of that system.</p>
    */
    @IncubatingApi
    const val MESSAGING_DESTINATION_SUBSCRIPTION_NAME: String = "messaging.destination.subscription.name"

    /**
    * <p>Low cardinality representation of the messaging destination name</p>
    * <p>Notes:</p>
    * <p>Destination names could be constructed from templates. An example would be a destination name involving a user name or product id. Although the destination name in this case is of high cardinality, the underlying template is of low cardinality and can be effectively used for grouping and aggregation.</p>
    */
    @IncubatingApi
    const val MESSAGING_DESTINATION_TEMPLATE: String = "messaging.destination.template"

    /**
    * <p>A boolean that is true if the message destination is temporary and might not exist anymore after messages are processed.</p>
    */
    @IncubatingApi
    const val MESSAGING_DESTINATION_TEMPORARY: String = "messaging.destination.temporary"

    /**
    * <p>Deprecated, no replacement at this time.</p>
    */
    @Deprecated("Removed. No replacement at this time.")
    const val MESSAGING_DESTINATION_PUBLISH_ANONYMOUS: String = "messaging.destination_publish.anonymous"

    /**
    * <p>Deprecated, no replacement at this time.</p>
    */
    @Deprecated("Removed. No replacement at this time.")
    const val MESSAGING_DESTINATION_PUBLISH_NAME: String = "messaging.destination_publish.name"

    /**
    * <p>Deprecated, use <c>messaging.consumer.group.name</c> instead.</p>
    */
    @Deprecated("Replaced by `messaging.consumer.group.name`.")
    const val MESSAGING_EVENTHUBS_CONSUMER_GROUP: String = "messaging.eventhubs.consumer.group"

    /**
    * <p>The UTC epoch seconds at which the message has been accepted and stored in the entity.</p>
    */
    @IncubatingApi
    const val MESSAGING_EVENTHUBS_MESSAGE_ENQUEUED_TIME: String = "messaging.eventhubs.message.enqueued_time"

    /**
    * <p>The ack deadline in seconds set for the modify ack deadline request.</p>
    */
    @IncubatingApi
    const val MESSAGING_GCP_PUBSUB_MESSAGE_ACK_DEADLINE: String = "messaging.gcp_pubsub.message.ack_deadline"

    /**
    * <p>The ack id for a given message.</p>
    */
    @IncubatingApi
    const val MESSAGING_GCP_PUBSUB_MESSAGE_ACK_ID: String = "messaging.gcp_pubsub.message.ack_id"

    /**
    * <p>The delivery attempt for a given message.</p>
    */
    @IncubatingApi
    const val MESSAGING_GCP_PUBSUB_MESSAGE_DELIVERY_ATTEMPT: String = "messaging.gcp_pubsub.message.delivery_attempt"

    /**
    * <p>The ordering key for a given message. If the attribute is not present, the message does not have an ordering key.</p>
    */
    @IncubatingApi
    const val MESSAGING_GCP_PUBSUB_MESSAGE_ORDERING_KEY: String = "messaging.gcp_pubsub.message.ordering_key"

    /**
    * <p>Deprecated, use <c>messaging.consumer.group.name</c> instead.</p>
    */
    @Deprecated("Replaced by `messaging.consumer.group.name`.")
    const val MESSAGING_KAFKA_CONSUMER_GROUP: String = "messaging.kafka.consumer.group"

    /**
    * <p>Deprecated, use <c>messaging.destination.partition.id</c> instead.</p>
    */
    @Deprecated("Replaced by `messaging.destination.partition.id`.")
    const val MESSAGING_KAFKA_DESTINATION_PARTITION: String = "messaging.kafka.destination.partition"

    /**
    * <p>Message keys in Kafka are used for grouping alike messages to ensure they're processed on the same partition. They differ from <c>messaging.message.id</c> in that they're not unique. If the key is <c>null</c>, the attribute MUST NOT be set.</p>
    * <p>Notes:</p>
    * <p>If the key type is not string, it's string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don't include its value.</p>
    */
    @IncubatingApi
    const val MESSAGING_KAFKA_MESSAGE_KEY: String = "messaging.kafka.message.key"

    /**
    * <p>Deprecated, use <c>messaging.kafka.offset</c> instead.</p>
    */
    @Deprecated("Replaced by `messaging.kafka.offset`.")
    const val MESSAGING_KAFKA_MESSAGE_OFFSET: String = "messaging.kafka.message.offset"

    /**
    * <p>A boolean that is true if the message is a tombstone.</p>
    */
    @IncubatingApi
    const val MESSAGING_KAFKA_MESSAGE_TOMBSTONE: String = "messaging.kafka.message.tombstone"

    /**
    * <p>The offset of a record in the corresponding Kafka partition.</p>
    */
    @IncubatingApi
    const val MESSAGING_KAFKA_OFFSET: String = "messaging.kafka.offset"

    /**
    * <p>The size of the message body in bytes.</p>
    * <p>Notes:</p>
    * <p>This can refer to both the compressed or uncompressed body size. If both sizes are known, the uncompressed
    * body size should be used.</p>
    */
    @IncubatingApi
    const val MESSAGING_MESSAGE_BODY_SIZE: String = "messaging.message.body.size"

    /**
    * <p>The conversation ID identifying the conversation to which the message belongs, represented as a string. Sometimes called "Correlation ID".</p>
    */
    @IncubatingApi
    const val MESSAGING_MESSAGE_CONVERSATION_ID: String = "messaging.message.conversation_id"

    /**
    * <p>The size of the message body and metadata in bytes.</p>
    * <p>Notes:</p>
    * <p>This can refer to both the compressed or uncompressed size. If both sizes are known, the uncompressed
    * size should be used.</p>
    */
    @IncubatingApi
    const val MESSAGING_MESSAGE_ENVELOPE_SIZE: String = "messaging.message.envelope.size"

    /**
    * <p>A value used by the messaging system as an identifier for the message, represented as a string.</p>
    */
    @IncubatingApi
    const val MESSAGING_MESSAGE_ID: String = "messaging.message.id"

    /**
    * <p>Deprecated, use <c>messaging.operation.type</c> instead.</p>
    */
    @Deprecated("Replaced by `messaging.operation.type`.")
    const val MESSAGING_OPERATION: String = "messaging.operation"

    /**
    * <p>The system-specific name of the messaging operation.</p>
    */
    @IncubatingApi
    const val MESSAGING_OPERATION_NAME: String = "messaging.operation.name"

    /**
    * <p>A string identifying the type of the messaging operation.</p>
    * <p>Notes:</p>
    * <p>If a custom value is used, it MUST be of low cardinality.</p>
    */
    @IncubatingApi
    const val MESSAGING_OPERATION_TYPE: String = "messaging.operation.type"

    /**
    * <p>RabbitMQ message routing key.</p>
    */
    @IncubatingApi
    const val MESSAGING_RABBITMQ_DESTINATION_ROUTING_KEY: String = "messaging.rabbitmq.destination.routing_key"

    /**
    * <p>RabbitMQ message delivery tag</p>
    */
    @IncubatingApi
    const val MESSAGING_RABBITMQ_MESSAGE_DELIVERY_TAG: String = "messaging.rabbitmq.message.delivery_tag"

    /**
    * <p>Deprecated, use <c>messaging.consumer.group.name</c> instead.</p>
    */
    @Deprecated("Replaced by `messaging.consumer.group.name` on the consumer spans. No replacement for producer spans.")
    const val MESSAGING_ROCKETMQ_CLIENT_GROUP: String = "messaging.rocketmq.client_group"

    /**
    * <p>Model of message consumption. This only applies to consumer spans.</p>
    */
    @IncubatingApi
    const val MESSAGING_ROCKETMQ_CONSUMPTION_MODEL: String = "messaging.rocketmq.consumption_model"

    /**
    * <p>The delay time level for delay message, which determines the message delay time.</p>
    */
    @IncubatingApi
    const val MESSAGING_ROCKETMQ_MESSAGE_DELAY_TIME_LEVEL: String = "messaging.rocketmq.message.delay_time_level"

    /**
    * <p>The timestamp in milliseconds that the delay message is expected to be delivered to consumer.</p>
    */
    @IncubatingApi
    const val MESSAGING_ROCKETMQ_MESSAGE_DELIVERY_TIMESTAMP: String = "messaging.rocketmq.message.delivery_timestamp"

    /**
    * <p>It is essential for FIFO message. Messages that belong to the same message group are always processed one by one within the same consumer group.</p>
    */
    @IncubatingApi
    const val MESSAGING_ROCKETMQ_MESSAGE_GROUP: String = "messaging.rocketmq.message.group"

    /**
    * <p>Key(s) of message, another way to mark message besides message id.</p>
    */
    @IncubatingApi
    const val MESSAGING_ROCKETMQ_MESSAGE_KEYS: String = "messaging.rocketmq.message.keys"

    /**
    * <p>The secondary classifier of message besides topic.</p>
    */
    @IncubatingApi
    const val MESSAGING_ROCKETMQ_MESSAGE_TAG: String = "messaging.rocketmq.message.tag"

    /**
    * <p>Type of message.</p>
    */
    @IncubatingApi
    const val MESSAGING_ROCKETMQ_MESSAGE_TYPE: String = "messaging.rocketmq.message.type"

    /**
    * <p>Namespace of RocketMQ resources, resources in different namespaces are individual.</p>
    */
    @IncubatingApi
    const val MESSAGING_ROCKETMQ_NAMESPACE: String = "messaging.rocketmq.namespace"

    /**
    * <p>Deprecated, use <c>messaging.destination.subscription.name</c> instead.</p>
    */
    @Deprecated("Replaced by `messaging.destination.subscription.name`.")
    const val MESSAGING_SERVICEBUS_DESTINATION_SUBSCRIPTION_NAME: String = "messaging.servicebus.destination.subscription_name"

    /**
    * <p>Describes the <a href="https://learn.microsoft.com/azure/service-bus-messaging/message-transfers-locks-settlement#peeklock">settlement type</a>.</p>
    */
    @IncubatingApi
    const val MESSAGING_SERVICEBUS_DISPOSITION_STATUS: String = "messaging.servicebus.disposition_status"

    /**
    * <p>Number of deliveries that have been attempted for this message.</p>
    */
    @IncubatingApi
    const val MESSAGING_SERVICEBUS_MESSAGE_DELIVERY_COUNT: String = "messaging.servicebus.message.delivery_count"

    /**
    * <p>The UTC epoch seconds at which the message has been accepted and stored in the entity.</p>
    */
    @IncubatingApi
    const val MESSAGING_SERVICEBUS_MESSAGE_ENQUEUED_TIME: String = "messaging.servicebus.message.enqueued_time"

    /**
    * <p>The messaging system as identified by the client instrumentation.</p>
    * <p>Notes:</p>
    * <p>The actual messaging system may differ from the one known by the client. For example, when using Kafka client libraries to communicate with Azure Event Hubs, the <c>messaging.system</c> is set to <c>kafka</c> based on the instrumentation's best knowledge.</p>
    */
    @IncubatingApi
    const val MESSAGING_SYSTEM: String = "messaging.system"

    /**
    * <p>MESSAGING_OPERATION_TYPE</p>
    */
    @IncubatingApi
    enum class MessagingOperationTypeValues(val value: String) {

        /**
        * <p>A message is created. "Create" spans always refer to a single message and are used to provide a unique creation context for messages in batch sending scenarios.</p>
        */
        CREATE("create"),

        /**
        * <p>One or more messages are provided for sending to an intermediary. If a single message is sent, the context of the "Send" span can be used as the creation context and no "Create" span needs to be created.</p>
        */
        SEND("send"),

        /**
        * <p>One or more messages are requested by a consumer. This operation refers to pull-based scenarios, where consumers explicitly call methods of messaging SDKs to receive messages.</p>
        */
        RECEIVE("receive"),

        /**
        * <p>One or more messages are processed by a consumer.</p>
        */
        PROCESS("process"),

        /**
        * <p>One or more messages are settled.</p>
        */
        SETTLE("settle"),

        /**
        * <p>Deprecated. Use <c>process</c> instead.</p>
        */
        DELIVER("deliver"),

        /**
        * <p>Deprecated. Use <c>send</c> instead.</p>
        */
        PUBLISH("publish"),
    }

    /**
    * <p>MESSAGING_ROCKETMQ_CONSUMPTION_MODEL</p>
    */
    @IncubatingApi
    enum class MessagingRocketmqConsumptionModelValues(val value: String) {

        /**
        * <p>Clustering consumption model</p>
        */
        CLUSTERING("clustering"),

        /**
        * <p>Broadcasting consumption model</p>
        */
        BROADCASTING("broadcasting"),
    }

    /**
    * <p>MESSAGING_ROCKETMQ_MESSAGE_TYPE</p>
    */
    @IncubatingApi
    enum class MessagingRocketmqMessageTypeValues(val value: String) {

        /**
        * <p>Normal message</p>
        */
        NORMAL("normal"),

        /**
        * <p>FIFO message</p>
        */
        FIFO("fifo"),

        /**
        * <p>Delay message</p>
        */
        DELAY("delay"),

        /**
        * <p>Transaction message</p>
        */
        TRANSACTION("transaction"),
    }

    /**
    * <p>MESSAGING_SERVICEBUS_DISPOSITION_STATUS</p>
    */
    @IncubatingApi
    enum class MessagingServicebusDispositionStatusValues(val value: String) {

        /**
        * <p>Message is completed</p>
        */
        COMPLETE("complete"),

        /**
        * <p>Message is abandoned</p>
        */
        ABANDON("abandon"),

        /**
        * <p>Message is sent to dead letter queue</p>
        */
        DEAD_LETTER("dead_letter"),

        /**
        * <p>Message is deferred</p>
        */
        DEFER("defer"),
    }

    /**
    * <p>MESSAGING_SYSTEM</p>
    */
    @IncubatingApi
    enum class MessagingSystemValues(val value: String) {

        /**
        * <p>Apache ActiveMQ</p>
        */
        ACTIVEMQ("activemq"),

        /**
        * <p>Amazon Simple Notification Service (SNS)</p>
        */
        AWS_SNS("aws.sns"),

        /**
        * <p>Amazon Simple Queue Service (SQS)</p>
        */
        AWS_SQS("aws_sqs"),

        /**
        * <p>Azure Event Grid</p>
        */
        EVENTGRID("eventgrid"),

        /**
        * <p>Azure Event Hubs</p>
        */
        EVENTHUBS("eventhubs"),

        /**
        * <p>Azure Service Bus</p>
        */
        SERVICEBUS("servicebus"),

        /**
        * <p>Google Cloud Pub/Sub</p>
        */
        GCP_PUBSUB("gcp_pubsub"),

        /**
        * <p>Java Message Service</p>
        */
        JMS("jms"),

        /**
        * <p>Apache Kafka</p>
        */
        KAFKA("kafka"),

        /**
        * <p>RabbitMQ</p>
        */
        RABBITMQ("rabbitmq"),

        /**
        * <p>Apache RocketMQ</p>
        */
        ROCKETMQ("rocketmq"),

        /**
        * <p>Apache Pulsar</p>
        */
        PULSAR("pulsar"),
    }
}
