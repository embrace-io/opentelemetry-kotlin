package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'gen_ai'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object GenAiAttributes {
  

    /**
    * <p>Free-form description of the GenAI agent provided by the application.</p>
    */
    @IncubatingApi
    const val GEN_AI_AGENT_DESCRIPTION: String = "gen_ai.agent.description"

    /**
    * <p>The unique identifier of the GenAI agent.</p>
    */
    @IncubatingApi
    const val GEN_AI_AGENT_ID: String = "gen_ai.agent.id"

    /**
    * <p>Human-readable name of the GenAI agent provided by the application.</p>
    */
    @IncubatingApi
    const val GEN_AI_AGENT_NAME: String = "gen_ai.agent.name"

    /**
    * <p>Deprecated, use Event API to report completions contents.</p>
    */
    @Deprecated("Removed, no replacement at this time.")
    const val GEN_AI_COMPLETION: String = "gen_ai.completion"

    /**
    * <p>The unique identifier for a conversation (session, thread), used to store and correlate messages within this conversation.</p>
    */
    @IncubatingApi
    const val GEN_AI_CONVERSATION_ID: String = "gen_ai.conversation.id"

    /**
    * <p>The data source identifier.</p>
    * <p>Notes:</p>
    * <p>Data sources are used by AI agents and RAG applications to store grounding data. A data source may be an external database, object store, document collection, website, or any other storage system used by the GenAI agent or application. The <c>gen_ai.data_source.id</c> SHOULD match the identifier used by the GenAI system rather than a name specific to the external storage, such as a database or object store. Semantic conventions referencing <c>gen_ai.data_source.id</c> MAY also leverage additional attributes, such as <c>db.*</c>, to further identify and describe the data source.</p>
    */
    @IncubatingApi
    const val GEN_AI_DATA_SOURCE_ID: String = "gen_ai.data_source.id"

    /**
    * <p>The chat history provided to the model as an input.</p>
    * <p>Notes:</p>
    * <p>Instrumentations MUST follow <a href="/docs/gen-ai/gen-ai-input-messages.json">Input messages JSON schema</a>.
    * When the attribute is recorded on events, it MUST be recorded in structured
    * form. When recorded on spans, it MAY be recorded as a JSON string if structured
    * format is not supported and SHOULD be recorded in structured form otherwise.</p>
    * <p>Messages MUST be provided in the order they were sent to the model.
    * Instrumentations MAY provide a way for users to filter or truncate
    * input messages.</p>
    * <blockquote>
    * <p>[!Warning]
    * This attribute is likely to contain sensitive information including user/PII data.</p></blockquote>
    * <p>See <a href="/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes">Recording content on attributes</a>
    * section for more details.</p>
    */
    @IncubatingApi
    const val GEN_AI_INPUT_MESSAGES: String = "gen_ai.input.messages"

    /**
    * <p>Deprecated, use <c>gen_ai.output.type</c>.</p>
    */
    @Deprecated("Replaced by `gen_ai.output.type`.")
    const val GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT: String = "gen_ai.openai.request.response_format"

    /**
    * <p>Deprecated, use <c>gen_ai.request.seed</c>.</p>
    */
    @Deprecated("Replaced by `gen_ai.request.seed`.")
    const val GEN_AI_OPENAI_REQUEST_SEED: String = "gen_ai.openai.request.seed"

    /**
    * <p>Deprecated, use <c>openai.request.service_tier</c>.</p>
    */
    @Deprecated("Replaced by `openai.request.service_tier`.")
    const val GEN_AI_OPENAI_REQUEST_SERVICE_TIER: String = "gen_ai.openai.request.service_tier"

    /**
    * <p>Deprecated, use <c>openai.response.service_tier</c>.</p>
    */
    @Deprecated("Replaced by `openai.response.service_tier`.")
    const val GEN_AI_OPENAI_RESPONSE_SERVICE_TIER: String = "gen_ai.openai.response.service_tier"

    /**
    * <p>Deprecated, use <c>openai.response.system_fingerprint</c>.</p>
    */
    @Deprecated("Replaced by `openai.response.system_fingerprint`.")
    const val GEN_AI_OPENAI_RESPONSE_SYSTEM_FINGERPRINT: String = "gen_ai.openai.response.system_fingerprint"

    /**
    * <p>The name of the operation being performed.</p>
    * <p>Notes:</p>
    * <p>If one of the predefined values applies, but specific system uses a different name it's RECOMMENDED to document it in the semantic conventions for specific GenAI system and use system-specific name in the instrumentation. If a different name is not documented, instrumentation libraries SHOULD use applicable predefined value.</p>
    */
    @IncubatingApi
    const val GEN_AI_OPERATION_NAME: String = "gen_ai.operation.name"

    /**
    * <p>Messages returned by the model where each message represents a specific model response (choice, candidate).</p>
    * <p>Notes:</p>
    * <p>Instrumentations MUST follow <a href="/docs/gen-ai/gen-ai-output-messages.json">Output messages JSON schema</a></p>
    * <p>Each message represents a single output choice/candidate generated by
    * the model. Each message corresponds to exactly one generation
    * (choice/candidate) and vice versa - one choice cannot be split across
    * multiple messages or one message cannot contain parts from multiple choices.</p>
    * <p>When the attribute is recorded on events, it MUST be recorded in structured
    * form. When recorded on spans, it MAY be recorded as a JSON string if structured
    * format is not supported and SHOULD be recorded in structured form otherwise.</p>
    * <p>Instrumentations MAY provide a way for users to filter or truncate
    * output messages.</p>
    * <blockquote>
    * <p>[!Warning]
    * This attribute is likely to contain sensitive information including user/PII data.</p></blockquote>
    * <p>See <a href="/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes">Recording content on attributes</a>
    * section for more details.</p>
    */
    @IncubatingApi
    const val GEN_AI_OUTPUT_MESSAGES: String = "gen_ai.output.messages"

    /**
    * <p>Represents the content type requested by the client.</p>
    * <p>Notes:</p>
    * <p>This attribute SHOULD be used when the client requests output of a specific type. The model may return zero or more outputs of this type.
    * This attribute specifies the output modality and not the actual output format. For example, if an image is requested, the actual output could be a URL pointing to an image file.
    * Additional output format details may be recorded in the future in the <c>gen_ai.output.{type}.*</c> attributes.</p>
    */
    @IncubatingApi
    const val GEN_AI_OUTPUT_TYPE: String = "gen_ai.output.type"

    /**
    * <p>Deprecated, use Event API to report prompt contents.</p>
    */
    @Deprecated("Removed, no replacement at this time.")
    const val GEN_AI_PROMPT: String = "gen_ai.prompt"

    /**
    * <p>The Generative AI provider as identified by the client or server instrumentation.</p>
    * <p>Notes:</p>
    * <p>The attribute SHOULD be set based on the instrumentation's best
    * knowledge and may differ from the actual model provider.</p>
    * <p>Multiple providers, including Azure OpenAI, Gemini, and AI hosting platforms
    * are accessible using the OpenAI REST API and corresponding client libraries,
    * but may proxy or host models from different providers.</p>
    * <p>The <c>gen_ai.request.model</c>, <c>gen_ai.response.model</c>, and <c>server.address</c>
    * attributes may help identify the actual system in use.</p>
    * <p>The <c>gen_ai.provider.name</c> attribute acts as a discriminator that
    * identifies the GenAI telemetry format flavor specific to that provider
    * within GenAI semantic conventions.
    * It SHOULD be set consistently with provider-specific attributes and signals.
    * For example, GenAI spans, metrics, and events related to AWS Bedrock
    * should have the <c>gen_ai.provider.name</c> set to <c>aws.bedrock</c> and include
    * applicable <c>aws.bedrock.*</c> attributes and are not expected to include
    * <c>openai.*</c> attributes.</p>
    */
    @IncubatingApi
    const val GEN_AI_PROVIDER_NAME: String = "gen_ai.provider.name"

    /**
    * <p>The target number of candidate completions to return.</p>
    */
    @IncubatingApi
    const val GEN_AI_REQUEST_CHOICE_COUNT: String = "gen_ai.request.choice.count"

    /**
    * <p>The encoding formats requested in an embeddings operation, if specified.</p>
    * <p>Notes:</p>
    * <p>In some GenAI systems the encoding formats are called embedding types. Also, some GenAI systems only accept a single format per request.</p>
    */
    @IncubatingApi
    const val GEN_AI_REQUEST_ENCODING_FORMATS: String = "gen_ai.request.encoding_formats"

    /**
    * <p>The frequency penalty setting for the GenAI request.</p>
    */
    @IncubatingApi
    const val GEN_AI_REQUEST_FREQUENCY_PENALTY: String = "gen_ai.request.frequency_penalty"

    /**
    * <p>The maximum number of tokens the model generates for a request.</p>
    */
    @IncubatingApi
    const val GEN_AI_REQUEST_MAX_TOKENS: String = "gen_ai.request.max_tokens"

    /**
    * <p>The name of the GenAI model a request is being made to.</p>
    */
    @IncubatingApi
    const val GEN_AI_REQUEST_MODEL: String = "gen_ai.request.model"

    /**
    * <p>The presence penalty setting for the GenAI request.</p>
    */
    @IncubatingApi
    const val GEN_AI_REQUEST_PRESENCE_PENALTY: String = "gen_ai.request.presence_penalty"

    /**
    * <p>Requests with same seed value more likely to return same result.</p>
    */
    @IncubatingApi
    const val GEN_AI_REQUEST_SEED: String = "gen_ai.request.seed"

    /**
    * <p>List of sequences that the model will use to stop generating further tokens.</p>
    */
    @IncubatingApi
    const val GEN_AI_REQUEST_STOP_SEQUENCES: String = "gen_ai.request.stop_sequences"

    /**
    * <p>The temperature setting for the GenAI request.</p>
    */
    @IncubatingApi
    const val GEN_AI_REQUEST_TEMPERATURE: String = "gen_ai.request.temperature"

    /**
    * <p>The top_k sampling setting for the GenAI request.</p>
    */
    @IncubatingApi
    const val GEN_AI_REQUEST_TOP_K: String = "gen_ai.request.top_k"

    /**
    * <p>The top_p sampling setting for the GenAI request.</p>
    */
    @IncubatingApi
    const val GEN_AI_REQUEST_TOP_P: String = "gen_ai.request.top_p"

    /**
    * <p>Array of reasons the model stopped generating tokens, corresponding to each generation received.</p>
    */
    @IncubatingApi
    const val GEN_AI_RESPONSE_FINISH_REASONS: String = "gen_ai.response.finish_reasons"

    /**
    * <p>The unique identifier for the completion.</p>
    */
    @IncubatingApi
    const val GEN_AI_RESPONSE_ID: String = "gen_ai.response.id"

    /**
    * <p>The name of the model that generated the response.</p>
    */
    @IncubatingApi
    const val GEN_AI_RESPONSE_MODEL: String = "gen_ai.response.model"

    /**
    * <p>Deprecated, use <c>gen_ai.provider.name</c> instead.</p>
    */
    @Deprecated("Replaced by `gen_ai.provider.name`.")
    const val GEN_AI_SYSTEM: String = "gen_ai.system"

    /**
    * <p>The system message or instructions provided to the GenAI model separately from the chat history.</p>
    * <p>Notes:</p>
    * <p>This attribute SHOULD be used when the corresponding provider or API
    * allows to provide system instructions or messages separately from the
    * chat history.</p>
    * <p>Instructions that are part of the chat history SHOULD be recorded in
    * <c>gen_ai.input.messages</c> attribute instead.</p>
    * <p>Instrumentations MUST follow <a href="/docs/gen-ai/gen-ai-system-instructions.json">System instructions JSON schema</a>.</p>
    * <p>When recorded on spans, it MAY be recorded as a JSON string if structured
    * format is not supported and SHOULD be recorded in structured form otherwise.</p>
    * <p>Instrumentations MAY provide a way for users to filter or truncate
    * system instructions.</p>
    * <blockquote>
    * <p>[!Warning]
    * This attribute may contain sensitive information.</p></blockquote>
    * <p>See <a href="/docs/gen-ai/gen-ai-spans.md#recording-content-on-attributes">Recording content on attributes</a>
    * section for more details.</p>
    */
    @IncubatingApi
    const val GEN_AI_SYSTEM_INSTRUCTIONS: String = "gen_ai.system_instructions"

    /**
    * <p>The type of token being counted.</p>
    */
    @IncubatingApi
    const val GEN_AI_TOKEN_TYPE: String = "gen_ai.token.type"

    /**
    * <p>The tool call identifier.</p>
    */
    @IncubatingApi
    const val GEN_AI_TOOL_CALL_ID: String = "gen_ai.tool.call.id"

    /**
    * <p>The tool description.</p>
    */
    @IncubatingApi
    const val GEN_AI_TOOL_DESCRIPTION: String = "gen_ai.tool.description"

    /**
    * <p>Name of the tool utilized by the agent.</p>
    */
    @IncubatingApi
    const val GEN_AI_TOOL_NAME: String = "gen_ai.tool.name"

    /**
    * <p>Type of the tool utilized by the agent</p>
    * <p>Notes:</p>
    * <p>Extension: A tool executed on the agent-side to directly call external APIs, bridging the gap between the agent and real-world systems.
    * Agent-side operations involve actions that are performed by the agent on the server or within the agent's controlled environment.
    * Function: A tool executed on the client-side, where the agent generates parameters for a predefined function, and the client executes the logic.
    * Client-side operations are actions taken on the user's end or within the client application.
    * Datastore: A tool used by the agent to access and query structured or unstructured external data for retrieval-augmented tasks or knowledge updates.</p>
    */
    @IncubatingApi
    const val GEN_AI_TOOL_TYPE: String = "gen_ai.tool.type"

    /**
    * <p>Deprecated, use <c>gen_ai.usage.output_tokens</c> instead.</p>
    */
    @Deprecated("Replaced by `gen_ai.usage.output_tokens`.")
    const val GEN_AI_USAGE_COMPLETION_TOKENS: String = "gen_ai.usage.completion_tokens"

    /**
    * <p>The number of tokens used in the GenAI input (prompt).</p>
    */
    @IncubatingApi
    const val GEN_AI_USAGE_INPUT_TOKENS: String = "gen_ai.usage.input_tokens"

    /**
    * <p>The number of tokens used in the GenAI response (completion).</p>
    */
    @IncubatingApi
    const val GEN_AI_USAGE_OUTPUT_TOKENS: String = "gen_ai.usage.output_tokens"

    /**
    * <p>Deprecated, use <c>gen_ai.usage.input_tokens</c> instead.</p>
    */
    @Deprecated("Replaced by `gen_ai.usage.input_tokens`.")
    const val GEN_AI_USAGE_PROMPT_TOKENS: String = "gen_ai.usage.prompt_tokens"

    /**
    * <p>GEN_AI_OPENAI_REQUEST_RESPONSE_FORMAT</p>
    */
    @Deprecated("Replaced by `gen_ai.output.type`.")
    enum class GenAiOpenaiRequestResponseFormatValues(val value: String) {

        /**
        * <p>Text response format</p>
        */
        TEXT("text"),

        /**
        * <p>JSON object response format</p>
        */
        JSON_OBJECT("json_object"),

        /**
        * <p>JSON schema response format</p>
        */
        JSON_SCHEMA("json_schema"),
    }

    /**
    * <p>GEN_AI_OPENAI_REQUEST_SERVICE_TIER</p>
    */
    @Deprecated("Replaced by `openai.request.service_tier`.")
    enum class GenAiOpenaiRequestServiceTierValues(val value: String) {

        /**
        * <p>The system will utilize scale tier credits until they are exhausted.</p>
        */
        AUTO("auto"),

        /**
        * <p>The system will utilize the default scale tier.</p>
        */
        DEFAULT("default"),
    }

    /**
    * <p>GEN_AI_OPERATION_NAME</p>
    */
    @IncubatingApi
    enum class GenAiOperationNameValues(val value: String) {

        /**
        * <p>Chat completion operation such as <a href="https://platform.openai.com/docs/api-reference/chat">OpenAI Chat API</a></p>
        */
        CHAT("chat"),

        /**
        * <p>Multimodal content generation operation such as <a href="https://ai.google.dev/api/generate-content">Gemini Generate Content</a></p>
        */
        GENERATE_CONTENT("generate_content"),

        /**
        * <p>Text completions operation such as <a href="https://platform.openai.com/docs/api-reference/completions">OpenAI Completions API (Legacy)</a></p>
        */
        TEXT_COMPLETION("text_completion"),

        /**
        * <p>Embeddings operation such as <a href="https://platform.openai.com/docs/api-reference/embeddings/create">OpenAI Create embeddings API</a></p>
        */
        EMBEDDINGS("embeddings"),

        /**
        * <p>Create GenAI agent</p>
        */
        CREATE_AGENT("create_agent"),

        /**
        * <p>Invoke GenAI agent</p>
        */
        INVOKE_AGENT("invoke_agent"),

        /**
        * <p>Execute a tool</p>
        */
        EXECUTE_TOOL("execute_tool"),
    }

    /**
    * <p>GEN_AI_OUTPUT_TYPE</p>
    */
    @IncubatingApi
    enum class GenAiOutputTypeValues(val value: String) {

        /**
        * <p>Plain text</p>
        */
        TEXT("text"),

        /**
        * <p>JSON object with known or unknown schema</p>
        */
        JSON("json"),

        /**
        * <p>Image</p>
        */
        IMAGE("image"),

        /**
        * <p>Speech</p>
        */
        SPEECH("speech"),
    }

    /**
    * <p>GEN_AI_PROVIDER_NAME</p>
    */
    @IncubatingApi
    enum class GenAiProviderNameValues(val value: String) {

        /**
        * <p><a href="https://openai.com/">OpenAI</a></p>
        */
        OPENAI("openai"),

        /**
        * <p>Any Google generative AI endpoint</p>
        */
        GCP_GEN_AI("gcp.gen_ai"),

        /**
        * <p><a href="https://cloud.google.com/vertex-ai">Vertex AI</a></p>
        */
        GCP_VERTEX_AI("gcp.vertex_ai"),

        /**
        * <p><a href="https://cloud.google.com/products/gemini">Gemini</a></p>
        */
        GCP_GEMINI("gcp.gemini"),

        /**
        * <p><a href="https://www.anthropic.com/">Anthropic</a></p>
        */
        ANTHROPIC("anthropic"),

        /**
        * <p><a href="https://cohere.com/">Cohere</a></p>
        */
        COHERE("cohere"),

        /**
        * <p>Azure AI Inference</p>
        */
        AZURE_AI_INFERENCE("azure.ai.inference"),

        /**
        * <p><a href="https://azure.microsoft.com/products/ai-services/openai-service/">Azure OpenAI</a></p>
        */
        AZURE_AI_OPENAI("azure.ai.openai"),

        /**
        * <p><a href="https://www.ibm.com/products/watsonx-ai">IBM Watsonx AI</a></p>
        */
        IBM_WATSONX_AI("ibm.watsonx.ai"),

        /**
        * <p><a href="https://aws.amazon.com/bedrock">AWS Bedrock</a></p>
        */
        AWS_BEDROCK("aws.bedrock"),

        /**
        * <p><a href="https://www.perplexity.ai/">Perplexity</a></p>
        */
        PERPLEXITY("perplexity"),

        /**
        * <p><a href="https://x.ai/">xAI</a></p>
        */
        X_AI("x_ai"),

        /**
        * <p><a href="https://www.deepseek.com/">DeepSeek</a></p>
        */
        DEEPSEEK("deepseek"),

        /**
        * <p><a href="https://groq.com/">Groq</a></p>
        */
        GROQ("groq"),

        /**
        * <p><a href="https://mistral.ai/">Mistral AI</a></p>
        */
        MISTRAL_AI("mistral_ai"),
    }

    /**
    * <p>GEN_AI_SYSTEM</p>
    */
    @Deprecated("Replaced by `gen_ai.provider.name`.")
    enum class GenAiSystemValues(val value: String) {

        /**
        * <p>OpenAI</p>
        */
        OPENAI("openai"),

        /**
        * <p>Any Google generative AI endpoint</p>
        */
        GCP_GEN_AI("gcp.gen_ai"),

        /**
        * <p>Vertex AI</p>
        */
        GCP_VERTEX_AI("gcp.vertex_ai"),

        /**
        * <p>Gemini</p>
        */
        GCP_GEMINI("gcp.gemini"),

        /**
        * <p>Vertex AI</p>
        */
        VERTEX_AI("vertex_ai"),

        /**
        * <p>Gemini</p>
        */
        GEMINI("gemini"),

        /**
        * <p>Anthropic</p>
        */
        ANTHROPIC("anthropic"),

        /**
        * <p>Cohere</p>
        */
        COHERE("cohere"),

        /**
        * <p>Azure AI Inference</p>
        */
        AZ_AI_INFERENCE("az.ai.inference"),

        /**
        * <p>Azure OpenAI</p>
        */
        AZ_AI_OPENAI("az.ai.openai"),

        /**
        * <p>Azure AI Inference</p>
        */
        AZURE_AI_INFERENCE("azure.ai.inference"),

        /**
        * <p>Azure OpenAI</p>
        */
        AZURE_AI_OPENAI("azure.ai.openai"),

        /**
        * <p>IBM Watsonx AI</p>
        */
        IBM_WATSONX_AI("ibm.watsonx.ai"),

        /**
        * <p>AWS Bedrock</p>
        */
        AWS_BEDROCK("aws.bedrock"),

        /**
        * <p>Perplexity</p>
        */
        PERPLEXITY("perplexity"),

        /**
        * <p>xAI</p>
        */
        XAI("xai"),

        /**
        * <p>DeepSeek</p>
        */
        DEEPSEEK("deepseek"),

        /**
        * <p>Groq</p>
        */
        GROQ("groq"),

        /**
        * <p>Mistral AI</p>
        */
        MISTRAL_AI("mistral_ai"),
    }

    /**
    * <p>GEN_AI_TOKEN_TYPE</p>
    */
    @IncubatingApi
    enum class GenAiTokenTypeValues(val value: String) {

        /**
        * <p>Input tokens (prompt, input, etc.)</p>
        */
        INPUT("input"),

        /**
        * <p>Output tokens (completion, response, etc.)</p>
        */
        COMPLETION("output"),

        /**
        * <p>Output tokens (completion, response, etc.)</p>
        */
        OUTPUT("output"),
    }
}
