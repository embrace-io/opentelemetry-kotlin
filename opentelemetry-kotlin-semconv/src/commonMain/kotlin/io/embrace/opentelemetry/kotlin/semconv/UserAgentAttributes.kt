package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'user_agent'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object UserAgentAttributes {
  

    /**
    * <p>Name of the user-agent extracted from original. Usually refers to the browser's name.</p>
    * <p>Notes:</p>
    * <p><a href="https://www.whatsmyua.info">Example</a> of extracting browser's name from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the <c>user_agent.original</c>, the most significant name SHOULD be selected. In such a scenario it should align with <c>user_agent.version</c></p>
    */
    @IncubatingApi
    const val USER_AGENT_NAME: String = "user_agent.name"

    /**
    * <p>Value of the <a href="https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent">HTTP User-Agent</a> header sent by the client.</p>
    */
    const val USER_AGENT_ORIGINAL: String = "user_agent.original"

    /**
    * <p>Human readable operating system name.</p>
    * <p>Notes:</p>
    * <p>For mapping user agent strings to OS names, libraries such as <a href="https://github.com/ua-parser">ua-parser</a> can be utilized.</p>
    */
    @IncubatingApi
    const val USER_AGENT_OS_NAME: String = "user_agent.os.name"

    /**
    * <p>The version string of the operating system as defined in <a href="/docs/resource/README.md#version-attributes">Version Attributes</a>.</p>
    * <p>Notes:</p>
    * <p>For mapping user agent strings to OS versions, libraries such as <a href="https://github.com/ua-parser">ua-parser</a> can be utilized.</p>
    */
    @IncubatingApi
    const val USER_AGENT_OS_VERSION: String = "user_agent.os.version"

    /**
    * <p>Specifies the category of synthetic traffic, such as tests or bots.</p>
    * <p>Notes:</p>
    * <p>This attribute MAY be derived from the contents of the <c>user_agent.original</c> attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.</p>
    */
    @IncubatingApi
    const val USER_AGENT_SYNTHETIC_TYPE: String = "user_agent.synthetic.type"

    /**
    * <p>Version of the user-agent extracted from original. Usually refers to the browser's version</p>
    * <p>Notes:</p>
    * <p><a href="https://www.whatsmyua.info">Example</a> of extracting browser's version from original string. In the case of using a user-agent for non-browser products, such as microservices with multiple names/versions inside the <c>user_agent.original</c>, the most significant version SHOULD be selected. In such a scenario it should align with <c>user_agent.name</c></p>
    */
    @IncubatingApi
    const val USER_AGENT_VERSION: String = "user_agent.version"

    /**
    * <p>USER_AGENT_SYNTHETIC_TYPE</p>
    */
    @IncubatingApi
    enum class UserAgentSyntheticTypeValues(val value: String) {

        /**
        * <p>Bot source.</p>
        */
        BOT("bot"),

        /**
        * <p>Synthetic test source.</p>
        */
        TEST("test"),
    }
}
