package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'vcs'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object VcsAttributes {
  

    /**
    * <p>The ID of the change (pull request/merge request/changelist) if applicable. This is usually a unique (within repository) identifier generated by the VCS system.</p>
    */
    @IncubatingApi
    const val VCS_CHANGE_ID: String = "vcs.change.id"

    /**
    * <p>The state of the change (pull request/merge request/changelist).</p>
    */
    @IncubatingApi
    const val VCS_CHANGE_STATE: String = "vcs.change.state"

    /**
    * <p>The human readable title of the change (pull request/merge request/changelist). This title is often a brief summary of the change and may get merged in to a ref as the commit summary.</p>
    */
    @IncubatingApi
    const val VCS_CHANGE_TITLE: String = "vcs.change.title"

    /**
    * <p>The type of line change being measured on a branch or change.</p>
    */
    @IncubatingApi
    const val VCS_LINE_CHANGE_TYPE: String = "vcs.line_change.type"

    /**
    * <p>The group owner within the version control system.</p>
    */
    @IncubatingApi
    const val VCS_OWNER_NAME: String = "vcs.owner.name"

    /**
    * <p>The name of the version control system provider.</p>
    */
    @IncubatingApi
    const val VCS_PROVIDER_NAME: String = "vcs.provider.name"

    /**
    * <p>The name of the <a href="https://git-scm.com/docs/gitglossary#def_ref">reference</a> such as <strong>branch</strong> or <strong>tag</strong> in the repository.</p>
    * <p>Notes:</p>
    * <p><c>base</c> refers to the starting point of a change. For example, <c>main</c>
    * would be the base reference of type branch if you've created a new
    * reference of type branch from it and created new commits.</p>
    */
    @IncubatingApi
    const val VCS_REF_BASE_NAME: String = "vcs.ref.base.name"

    /**
    * <p>The revision, literally <a href="https://www.merriam-webster.com/dictionary/revision">revised version</a>, The revision most often refers to a commit object in Git, or a revision number in SVN.</p>
    * <p>Notes:</p>
    * <p><c>base</c> refers to the starting point of a change. For example, <c>main</c>
    * would be the base reference of type branch if you've created a new
    * reference of type branch from it and created new commits. The
    * revision can be a full <a href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf">hash value (see
    * glossary)</a>,
    * of the recorded change to a ref within a repository pointing to a
    * commit <a href="https://git-scm.com/docs/git-commit">commit</a> object. It does
    * not necessarily have to be a hash; it can simply define a <a href="https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html">revision
    * number</a>
    * which is an integer that is monotonically increasing. In cases where
    * it is identical to the <c>ref.base.name</c>, it SHOULD still be included.
    * It is up to the implementer to decide which value to set as the
    * revision based on the VCS system and situational context.</p>
    */
    @IncubatingApi
    const val VCS_REF_BASE_REVISION: String = "vcs.ref.base.revision"

    /**
    * <p>The type of the <a href="https://git-scm.com/docs/gitglossary#def_ref">reference</a> in the repository.</p>
    * <p>Notes:</p>
    * <p><c>base</c> refers to the starting point of a change. For example, <c>main</c>
    * would be the base reference of type branch if you've created a new
    * reference of type branch from it and created new commits.</p>
    */
    @IncubatingApi
    const val VCS_REF_BASE_TYPE: String = "vcs.ref.base.type"

    /**
    * <p>The name of the <a href="https://git-scm.com/docs/gitglossary#def_ref">reference</a> such as <strong>branch</strong> or <strong>tag</strong> in the repository.</p>
    * <p>Notes:</p>
    * <p><c>head</c> refers to where you are right now; the current reference at a
    * given time.</p>
    */
    @IncubatingApi
    const val VCS_REF_HEAD_NAME: String = "vcs.ref.head.name"

    /**
    * <p>The revision, literally <a href="https://www.merriam-webster.com/dictionary/revision">revised version</a>, The revision most often refers to a commit object in Git, or a revision number in SVN.</p>
    * <p>Notes:</p>
    * <p><c>head</c> refers to where you are right now; the current reference at a
    * given time.The revision can be a full <a href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf">hash value (see
    * glossary)</a>,
    * of the recorded change to a ref within a repository pointing to a
    * commit <a href="https://git-scm.com/docs/git-commit">commit</a> object. It does
    * not necessarily have to be a hash; it can simply define a <a href="https://svnbook.red-bean.com/en/1.7/svn.tour.revs.specifiers.html">revision
    * number</a>
    * which is an integer that is monotonically increasing. In cases where
    * it is identical to the <c>ref.head.name</c>, it SHOULD still be included.
    * It is up to the implementer to decide which value to set as the
    * revision based on the VCS system and situational context.</p>
    */
    @IncubatingApi
    const val VCS_REF_HEAD_REVISION: String = "vcs.ref.head.revision"

    /**
    * <p>The type of the <a href="https://git-scm.com/docs/gitglossary#def_ref">reference</a> in the repository.</p>
    * <p>Notes:</p>
    * <p><c>head</c> refers to where you are right now; the current reference at a
    * given time.</p>
    */
    @IncubatingApi
    const val VCS_REF_HEAD_TYPE: String = "vcs.ref.head.type"

    /**
    * <p>The type of the <a href="https://git-scm.com/docs/gitglossary#def_ref">reference</a> in the repository.</p>
    */
    @IncubatingApi
    const val VCS_REF_TYPE: String = "vcs.ref.type"

    /**
    * <p>Deprecated, use <c>vcs.change.id</c> instead.</p>
    */
    @Deprecated("Replaced by `vcs.change.id`.")
    const val VCS_REPOSITORY_CHANGE_ID: String = "vcs.repository.change.id"

    /**
    * <p>Deprecated, use <c>vcs.change.title</c> instead.</p>
    */
    @Deprecated("Replaced by `vcs.change.title`.")
    const val VCS_REPOSITORY_CHANGE_TITLE: String = "vcs.repository.change.title"

    /**
    * <p>The human readable name of the repository. It SHOULD NOT include any additional identifier like Group/SubGroup in GitLab or organization in GitHub.</p>
    * <p>Notes:</p>
    * <p>Due to it only being the name, it can clash with forks of the same
    * repository if collecting telemetry across multiple orgs or groups in
    * the same backends.</p>
    */
    @IncubatingApi
    const val VCS_REPOSITORY_NAME: String = "vcs.repository.name"

    /**
    * <p>Deprecated, use <c>vcs.ref.head.name</c> instead.</p>
    */
    @Deprecated("Replaced by `vcs.ref.head.name`.")
    const val VCS_REPOSITORY_REF_NAME: String = "vcs.repository.ref.name"

    /**
    * <p>Deprecated, use <c>vcs.ref.head.revision</c> instead.</p>
    */
    @Deprecated("Replaced by `vcs.ref.head.revision`.")
    const val VCS_REPOSITORY_REF_REVISION: String = "vcs.repository.ref.revision"

    /**
    * <p>Deprecated, use <c>vcs.ref.head.type</c> instead.</p>
    */
    @Deprecated("Replaced by `vcs.ref.head.type`.")
    const val VCS_REPOSITORY_REF_TYPE: String = "vcs.repository.ref.type"

    /**
    * <p>The <a href="https://support.google.com/webmasters/answer/10347851?hl=en#:~:text=A%20canonical%20URL%20is%20the,Google%20chooses%20one%20as%20canonical.">canonical URL</a> of the repository providing the complete HTTP(S) address in order to locate and identify the repository through a browser.</p>
    * <p>Notes:</p>
    * <p>In Git Version Control Systems, the canonical URL SHOULD NOT include
    * the <c>.git</c> extension.</p>
    */
    @IncubatingApi
    const val VCS_REPOSITORY_URL_FULL: String = "vcs.repository.url.full"

    /**
    * <p>The type of revision comparison.</p>
    */
    @IncubatingApi
    const val VCS_REVISION_DELTA_DIRECTION: String = "vcs.revision_delta.direction"

    /**
    * <p>VCS_CHANGE_STATE</p>
    */
    @IncubatingApi
    enum class VcsChangeStateValues(val value: String) {

        /**
        * <p>Open means the change is currently active and under review. It hasn't been merged into the target branch yet, and it's still possible to make changes or add comments.</p>
        */
        OPEN("open"),

        /**
        * <p>WIP (work-in-progress, draft) means the change is still in progress and not yet ready for a full review. It might still undergo significant changes.</p>
        */
        WIP("wip"),

        /**
        * <p>Closed means the merge request has been closed without merging. This can happen for various reasons, such as the changes being deemed unnecessary, the issue being resolved in another way, or the author deciding to withdraw the request.</p>
        */
        CLOSED("closed"),

        /**
        * <p>Merged indicates that the change has been successfully integrated into the target codebase.</p>
        */
        MERGED("merged"),
    }

    /**
    * <p>VCS_LINE_CHANGE_TYPE</p>
    */
    @IncubatingApi
    enum class VcsLineChangeTypeValues(val value: String) {

        /**
        * <p>How many lines were added.</p>
        */
        ADDED("added"),

        /**
        * <p>How many lines were removed.</p>
        */
        REMOVED("removed"),
    }

    /**
    * <p>VCS_PROVIDER_NAME</p>
    */
    @IncubatingApi
    enum class VcsProviderNameValues(val value: String) {

        /**
        * <p><a href="https://github.com">GitHub</a></p>
        */
        GITHUB("github"),

        /**
        * <p><a href="https://gitlab.com">GitLab</a></p>
        */
        GITLAB("gitlab"),

        /**
        * <p>Deprecated, use <c>gitea</c> instead.</p>
        */
        GITTEA("gittea"),

        /**
        * <p><a href="https://gitea.io">Gitea</a></p>
        */
        GITEA("gitea"),

        /**
        * <p><a href="https://bitbucket.org">Bitbucket</a></p>
        */
        BITBUCKET("bitbucket"),
    }

    /**
    * <p>VCS_REF_BASE_TYPE</p>
    */
    @IncubatingApi
    enum class VcsRefBaseTypeValues(val value: String) {

        /**
        * <p><a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch">branch</a></p>
        */
        BRANCH("branch"),

        /**
        * <p><a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag">tag</a></p>
        */
        TAG("tag"),
    }

    /**
    * <p>VCS_REF_HEAD_TYPE</p>
    */
    @IncubatingApi
    enum class VcsRefHeadTypeValues(val value: String) {

        /**
        * <p><a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch">branch</a></p>
        */
        BRANCH("branch"),

        /**
        * <p><a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag">tag</a></p>
        */
        TAG("tag"),
    }

    /**
    * <p>VCS_REF_TYPE</p>
    */
    @IncubatingApi
    enum class VcsRefTypeValues(val value: String) {

        /**
        * <p><a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch">branch</a></p>
        */
        BRANCH("branch"),

        /**
        * <p><a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag">tag</a></p>
        */
        TAG("tag"),
    }

    /**
    * <p>VCS_REPOSITORY_REF_TYPE</p>
    */
    @Deprecated("Replaced by `vcs.ref.head.type`.")
    enum class VcsRepositoryRefTypeValues(val value: String) {

        /**
        * <p><a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefbranchabranch">branch</a></p>
        */
        BRANCH("branch"),

        /**
        * <p><a href="https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddeftagatag">tag</a></p>
        */
        TAG("tag"),
    }

    /**
    * <p>VCS_REVISION_DELTA_DIRECTION</p>
    */
    @IncubatingApi
    enum class VcsRevisionDeltaDirectionValues(val value: String) {

        /**
        * <p>How many revisions the change is behind the target ref.</p>
        */
        BEHIND("behind"),

        /**
        * <p>How many revisions the change is ahead of the target ref.</p>
        */
        AHEAD("ahead"),
    }
}
