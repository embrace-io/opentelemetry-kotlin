package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'cassandra'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object CassandraAttributes {
  

    /**
    * <p>The consistency level of the query. Based on consistency values from <a href="https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html">CQL</a>.</p>
    */
    @IncubatingApi
    const val CASSANDRA_CONSISTENCY_LEVEL: String = "cassandra.consistency.level"

    /**
    * <p>The data center of the coordinating node for a query.</p>
    */
    @IncubatingApi
    const val CASSANDRA_COORDINATOR_DC: String = "cassandra.coordinator.dc"

    /**
    * <p>The ID of the coordinating node for a query.</p>
    */
    @IncubatingApi
    const val CASSANDRA_COORDINATOR_ID: String = "cassandra.coordinator.id"

    /**
    * <p>The fetch size used for paging, i.e. how many rows will be returned at once.</p>
    */
    @IncubatingApi
    const val CASSANDRA_PAGE_SIZE: String = "cassandra.page.size"

    /**
    * <p>Whether or not the query is idempotent.</p>
    */
    @IncubatingApi
    const val CASSANDRA_QUERY_IDEMPOTENT: String = "cassandra.query.idempotent"

    /**
    * <p>The number of times a query was speculatively executed. Not set or <c>0</c> if the query was not executed speculatively.</p>
    */
    @IncubatingApi
    const val CASSANDRA_SPECULATIVE_EXECUTION_COUNT: String = "cassandra.speculative_execution.count"

    /**
    * <p>CASSANDRA_CONSISTENCY_LEVEL</p>
    */
    @IncubatingApi
    enum class CassandraConsistencyLevelValues(val value: String) {

        /**
        * <p>All</p>
        */
        ALL("all"),

        /**
        * <p>Each Quorum</p>
        */
        EACH_QUORUM("each_quorum"),

        /**
        * <p>Quorum</p>
        */
        QUORUM("quorum"),

        /**
        * <p>Local Quorum</p>
        */
        LOCAL_QUORUM("local_quorum"),

        /**
        * <p>One</p>
        */
        ONE("one"),

        /**
        * <p>Two</p>
        */
        TWO("two"),

        /**
        * <p>Three</p>
        */
        THREE("three"),

        /**
        * <p>Local One</p>
        */
        LOCAL_ONE("local_one"),

        /**
        * <p>Any</p>
        */
        ANY("any"),

        /**
        * <p>Serial</p>
        */
        SERIAL("serial"),

        /**
        * <p>Local Serial</p>
        */
        LOCAL_SERIAL("local_serial"),
    }
}
