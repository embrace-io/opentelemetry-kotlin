package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'db'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object DbAttributes {
  

    /**
    * <p>Deprecated, use <c>cassandra.consistency.level</c> instead.</p>
    */
    @Deprecated("Replaced by `cassandra.consistency.level`.")
    const val DB_CASSANDRA_CONSISTENCY_LEVEL: String = "db.cassandra.consistency_level"

    /**
    * <p>Deprecated, use <c>cassandra.coordinator.dc</c> instead.</p>
    */
    @Deprecated("Replaced by `cassandra.coordinator.dc`.")
    const val DB_CASSANDRA_COORDINATOR_DC: String = "db.cassandra.coordinator.dc"

    /**
    * <p>Deprecated, use <c>cassandra.coordinator.id</c> instead.</p>
    */
    @Deprecated("Replaced by `cassandra.coordinator.id`.")
    const val DB_CASSANDRA_COORDINATOR_ID: String = "db.cassandra.coordinator.id"

    /**
    * <p>Deprecated, use <c>cassandra.query.idempotent</c> instead.</p>
    */
    @Deprecated("Replaced by `cassandra.query.idempotent`.")
    const val DB_CASSANDRA_IDEMPOTENCE: String = "db.cassandra.idempotence"

    /**
    * <p>Deprecated, use <c>cassandra.page.size</c> instead.</p>
    */
    @Deprecated("Replaced by `cassandra.page.size`.")
    const val DB_CASSANDRA_PAGE_SIZE: String = "db.cassandra.page_size"

    /**
    * <p>Deprecated, use <c>cassandra.speculative_execution.count</c> instead.</p>
    */
    @Deprecated("Replaced by `cassandra.speculative_execution.count`.")
    const val DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: String = "db.cassandra.speculative_execution_count"

    /**
    * <p>Deprecated, use <c>db.collection.name</c> instead.</p>
    */
    @Deprecated("Replaced by `db.collection.name`.")
    const val DB_CASSANDRA_TABLE: String = "db.cassandra.table"

    /**
    * <p>The name of the connection pool; unique within the instrumented application. In case the connection pool implementation doesn't provide a name, instrumentation SHOULD use a combination of parameters that would make the name unique, for example, combining attributes <c>server.address</c>, <c>server.port</c>, and <c>db.namespace</c>, formatted as <c>server.address:server.port/db.namespace</c>. Instrumentations that generate connection pool name following different patterns SHOULD document it.</p>
    */
    @IncubatingApi
    const val DB_CLIENT_CONNECTION_POOL_NAME: String = "db.client.connection.pool.name"

    /**
    * <p>The state of a connection in the pool</p>
    */
    @IncubatingApi
    const val DB_CLIENT_CONNECTION_STATE: String = "db.client.connection.state"

    /**
    * <p>Deprecated, use <c>db.client.connection.pool.name</c> instead.</p>
    */
    @Deprecated("Replaced by `db.client.connection.pool.name`.")
    const val DB_CLIENT_CONNECTIONS_POOL_NAME: String = "db.client.connections.pool.name"

    /**
    * <p>Deprecated, use <c>db.client.connection.state</c> instead.</p>
    */
    @Deprecated("Replaced by `db.client.connection.state`.")
    const val DB_CLIENT_CONNECTIONS_STATE: String = "db.client.connections.state"

    /**
    * <p>The name of a collection (table, container) within the database.</p>
    * <p>Notes:</p>
    * <p>It is RECOMMENDED to capture the value as provided by the application
    * without attempting to do any case normalization.</p>
    * <p>The collection name SHOULD NOT be extracted from <c>db.query.text</c>,
    * when the database system supports query text with multiple collections
    * in non-batch operations.</p>
    * <p>For batch operations, if the individual operations are known to have the same
    * collection name then that collection name SHOULD be used.</p>
    */
    const val DB_COLLECTION_NAME: String = "db.collection.name"

    /**
    * <p>Deprecated, use <c>server.address</c>, <c>server.port</c> attributes instead.</p>
    */
    @Deprecated("Replaced by `server.address` and `server.port`.")
    const val DB_CONNECTION_STRING: String = "db.connection_string"

    /**
    * <p>Deprecated, use <c>azure.client.id</c> instead.</p>
    */
    @Deprecated("Replaced by `azure.client.id`.")
    const val DB_COSMOSDB_CLIENT_ID: String = "db.cosmosdb.client_id"

    /**
    * <p>Deprecated, use <c>azure.cosmosdb.connection.mode</c> instead.</p>
    */
    @Deprecated("Replaced by `azure.cosmosdb.connection.mode`.")
    const val DB_COSMOSDB_CONNECTION_MODE: String = "db.cosmosdb.connection_mode"

    /**
    * <p>Deprecated, use <c>cosmosdb.consistency.level</c> instead.</p>
    */
    @Deprecated("Replaced by `azure.cosmosdb.consistency.level`.")
    const val DB_COSMOSDB_CONSISTENCY_LEVEL: String = "db.cosmosdb.consistency_level"

    /**
    * <p>Deprecated, use <c>db.collection.name</c> instead.</p>
    */
    @Deprecated("Replaced by `db.collection.name`.")
    const val DB_COSMOSDB_CONTAINER: String = "db.cosmosdb.container"

    /**
    * <p>Deprecated, no replacement at this time.</p>
    */
    @Deprecated("Removed, no replacement at this time.")
    const val DB_COSMOSDB_OPERATION_TYPE: String = "db.cosmosdb.operation_type"

    /**
    * <p>Deprecated, use <c>azure.cosmosdb.operation.contacted_regions</c> instead.</p>
    */
    @Deprecated("Replaced by `azure.cosmosdb.operation.contacted_regions`.")
    const val DB_COSMOSDB_REGIONS_CONTACTED: String = "db.cosmosdb.regions_contacted"

    /**
    * <p>Deprecated, use <c>azure.cosmosdb.operation.request_charge</c> instead.</p>
    */
    @Deprecated("Replaced by `azure.cosmosdb.operation.request_charge`.")
    const val DB_COSMOSDB_REQUEST_CHARGE: String = "db.cosmosdb.request_charge"

    /**
    * <p>Deprecated, use <c>azure.cosmosdb.request.body.size</c> instead.</p>
    */
    @Deprecated("Replaced by `azure.cosmosdb.request.body.size`.")
    const val DB_COSMOSDB_REQUEST_CONTENT_LENGTH: String = "db.cosmosdb.request_content_length"

    /**
    * <p>Deprecated, use <c>db.response.status_code</c> instead.</p>
    */
    @Deprecated("Replaced by `db.response.status_code`.")
    const val DB_COSMOSDB_STATUS_CODE: String = "db.cosmosdb.status_code"

    /**
    * <p>Deprecated, use <c>azure.cosmosdb.response.sub_status_code</c> instead.</p>
    */
    @Deprecated("Replaced by `azure.cosmosdb.response.sub_status_code`.")
    const val DB_COSMOSDB_SUB_STATUS_CODE: String = "db.cosmosdb.sub_status_code"

    /**
    * <p>Deprecated, use <c>db.namespace</c> instead.</p>
    */
    @Deprecated("Replaced by `db.namespace`.")
    const val DB_ELASTICSEARCH_CLUSTER_NAME: String = "db.elasticsearch.cluster.name"

    /**
    * <p>Deprecated, use <c>elasticsearch.node.name</c> instead.</p>
    */
    @Deprecated("Replaced by `elasticsearch.node.name`.")
    const val DB_ELASTICSEARCH_NODE_NAME: String = "db.elasticsearch.node.name"

    /**
    * <p>Deprecated, use <c>db.operation.parameter</c> instead.</p>
    */
    @Deprecated("Replaced by `db.operation.parameter`.")
    const val DB_ELASTICSEARCH_PATH_PARTS: String = "db.elasticsearch.path_parts"

    /**
    * <p>Deprecated, no general replacement at this time. For Elasticsearch, use <c>db.elasticsearch.node.name</c> instead.</p>
    */
    @Deprecated("Removed, no general replacement at this time. For Elasticsearch, use `db.elasticsearch.node.name` instead.")
    const val DB_INSTANCE_ID: String = "db.instance.id"

    /**
    * <p>Removed, no replacement at this time.</p>
    */
    @Deprecated("Removed, no replacement at this time.")
    const val DB_JDBC_DRIVER_CLASSNAME: String = "db.jdbc.driver_classname"

    /**
    * <p>Deprecated, use <c>db.collection.name</c> instead.</p>
    */
    @Deprecated("Replaced by `db.collection.name`.")
    const val DB_MONGODB_COLLECTION: String = "db.mongodb.collection"

    /**
    * <p>Deprecated, SQL Server instance is now populated as a part of <c>db.namespace</c> attribute.</p>
    */
    @Deprecated("Removed, no replacement at this time.")
    const val DB_MSSQL_INSTANCE_NAME: String = "db.mssql.instance_name"

    /**
    * <p>Deprecated, use <c>db.namespace</c> instead.</p>
    */
    @Deprecated("Replaced by `db.namespace`.")
    const val DB_NAME: String = "db.name"

    /**
    * <p>The name of the database, fully qualified within the server address and port.</p>
    * <p>Notes:</p>
    * <p>If a database system has multiple namespace components, they SHOULD be concatenated from the most general to the most specific namespace component, using <c>|</c> as a separator between the components. Any missing components (and their associated separators) SHOULD be omitted.
    * Semantic conventions for individual database systems SHOULD document what <c>db.namespace</c> means in the context of that system.
    * It is RECOMMENDED to capture the value as provided by the application without attempting to do any case normalization.</p>
    */
    const val DB_NAMESPACE: String = "db.namespace"

    /**
    * <p>Deprecated, use <c>db.operation.name</c> instead.</p>
    */
    @Deprecated("Replaced by `db.operation.name`.")
    const val DB_OPERATION: String = "db.operation"

    /**
    * <p>The number of queries included in a batch operation.</p>
    * <p>Notes:</p>
    * <p>Operations are only considered batches when they contain two or more operations, and so <c>db.operation.batch.size</c> SHOULD never be <c>1</c>.</p>
    */
    const val DB_OPERATION_BATCH_SIZE: String = "db.operation.batch.size"

    /**
    * <p>The name of the operation or command being executed.</p>
    * <p>Notes:</p>
    * <p>It is RECOMMENDED to capture the value as provided by the application
    * without attempting to do any case normalization.</p>
    * <p>The operation name SHOULD NOT be extracted from <c>db.query.text</c>,
    * when the database system supports query text with multiple operations
    * in non-batch operations.</p>
    * <p>If spaces can occur in the operation name, multiple consecutive spaces
    * SHOULD be normalized to a single space.</p>
    * <p>For batch operations, if the individual operations are known to have the same operation name
    * then that operation name SHOULD be used prepended by <c>BATCH </c>,
    * otherwise <c>db.operation.name</c> SHOULD be <c>BATCH</c> or some other database
    * system specific term if more applicable.</p>
    */
    const val DB_OPERATION_NAME: String = "db.operation.name"

    /**
    * <p>A database operation parameter, with <c><key></c> being the parameter name, and the attribute value being a string representation of the parameter value.</p>
    * <p>Notes:</p>
    * <p>For example, a client-side maximum number of rows to read from the database
    * MAY be recorded as the <c>db.operation.parameter.max_rows</c> attribute.</p>
    * <p><c>db.query.text</c> parameters SHOULD be captured using <c>db.query.parameter.<key></c>
    * instead of <c>db.operation.parameter.<key></c>.</p>
    */
    @IncubatingApi
    const val DB_OPERATION_PARAMETER: String = "db.operation.parameter"

    /**
    * <p>A database query parameter, with <c><key></c> being the parameter name, and the attribute value being a string representation of the parameter value.</p>
    * <p>Notes:</p>
    * <p>If a query parameter has no name and instead is referenced only by index,
    * then <c><key></c> SHOULD be the 0-based index.</p>
    * <p><c>db.query.parameter.<key></c> SHOULD match
    * up with the parameterized placeholders present in <c>db.query.text</c>.</p>
    * <p><c>db.query.parameter.<key></c> SHOULD NOT be captured on batch operations.</p>
    * <p>Examples:</p>
    * <ul>
    *   <li>For a query <c>SELECT * FROM users where username =  %s</c> with the parameter <c>"jdoe"</c>,
    * the attribute <c>db.query.parameter.0</c> SHOULD be set to <c>"jdoe"</c>.</li>
    *   <li>For a query <c>"SELECT * FROM users WHERE username = %(username)s;</c> with parameter
    * <c>username = "jdoe"</c>, the attribute <c>db.query.parameter.username</c> SHOULD be set to <c>"jdoe"</c>.</li>
    * </ul>
    */
    @IncubatingApi
    const val DB_QUERY_PARAMETER: String = "db.query.parameter"

    /**
    * <p>Low cardinality summary of a database query.</p>
    * <p>Notes:</p>
    * <p>The query summary describes a class of database queries and is useful
    * as a grouping key, especially when analyzing telemetry for database
    * calls involving complex queries.</p>
    * <p>Summary may be available to the instrumentation through
    * instrumentation hooks or other means. If it is not available, instrumentations
    * that support query parsing SHOULD generate a summary following
    * <a href="/docs/database/database-spans.md#generating-a-summary-of-the-query">Generating query summary</a>
    * section.</p>
    */
    const val DB_QUERY_SUMMARY: String = "db.query.summary"

    /**
    * <p>The database query being executed.</p>
    * <p>Notes:</p>
    * <p>For sanitization see <a href="/docs/database/database-spans.md#sanitization-of-dbquerytext">Sanitization of <c>db.query.text</c></a>.
    * For batch operations, if the individual operations are known to have the same query text then that query text SHOULD be used, otherwise all of the individual query texts SHOULD be concatenated with separator <c>; </c> or some other database system specific separator if more applicable.
    * Parameterized query text SHOULD NOT be sanitized. Even though parameterized query text can potentially have sensitive data, by using a parameterized query the user is giving a strong signal that any sensitive data will be passed as parameter values, and the benefit to observability of capturing the static part of the query text by default outweighs the risk.</p>
    */
    const val DB_QUERY_TEXT: String = "db.query.text"

    /**
    * <p>Deprecated, use <c>db.namespace</c> instead.</p>
    */
    @Deprecated("Replaced by `db.namespace`.")
    const val DB_REDIS_DATABASE_INDEX: String = "db.redis.database_index"

    /**
    * <p>Number of rows returned by the operation.</p>
    */
    @IncubatingApi
    const val DB_RESPONSE_RETURNED_ROWS: String = "db.response.returned_rows"

    /**
    * <p>Database response status code.</p>
    * <p>Notes:</p>
    * <p>The status code returned by the database. Usually it represents an error code, but may also represent partial success, warning, or differentiate between various types of successful outcomes.
    * Semantic conventions for individual database systems SHOULD document what <c>db.response.status_code</c> means in the context of that system.</p>
    */
    const val DB_RESPONSE_STATUS_CODE: String = "db.response.status_code"

    /**
    * <p>Deprecated, use <c>db.collection.name</c> instead.</p>
    */
    @Deprecated("Replaced by `db.collection.name`, but only if not extracting the value from `db.query.text`.")
    const val DB_SQL_TABLE: String = "db.sql.table"

    /**
    * <p>The database statement being executed.</p>
    */
    @Deprecated("Replaced by `db.query.text`.")
    const val DB_STATEMENT: String = "db.statement"

    /**
    * <p>The name of a stored procedure within the database.</p>
    * <p>Notes:</p>
    * <p>It is RECOMMENDED to capture the value as provided by the application
    * without attempting to do any case normalization.</p>
    * <p>For batch operations, if the individual operations are known to have the same
    * stored procedure name then that stored procedure name SHOULD be used.</p>
    */
    const val DB_STORED_PROCEDURE_NAME: String = "db.stored_procedure.name"

    /**
    * <p>Deprecated, use <c>db.system.name</c> instead.</p>
    */
    @Deprecated("Replaced by `db.system.name`.")
    const val DB_SYSTEM: String = "db.system"

    /**
    * <p>The database management system (DBMS) product as identified by the client instrumentation.</p>
    * <p>Notes:</p>
    * <p>The actual DBMS may differ from the one identified by the client. For example, when using PostgreSQL client libraries to connect to a CockroachDB, the <c>db.system.name</c> is set to <c>postgresql</c> based on the instrumentation's best knowledge.</p>
    */
    const val DB_SYSTEM_NAME: String = "db.system.name"

    /**
    * <p>Deprecated, no replacement at this time.</p>
    */
    @Deprecated("Removed, no replacement at this time.")
    const val DB_USER: String = "db.user"

    /**
    * <p>DB_CASSANDRA_CONSISTENCY_LEVEL</p>
    */
    @Deprecated("Replaced by `cassandra.consistency.level`.")
    enum class DbCassandraConsistencyLevelValues(val value: String) {

        /**
        * <p>all.</p>
        */
        ALL("all"),

        /**
        * <p>each_quorum.</p>
        */
        EACH_QUORUM("each_quorum"),

        /**
        * <p>quorum.</p>
        */
        QUORUM("quorum"),

        /**
        * <p>local_quorum.</p>
        */
        LOCAL_QUORUM("local_quorum"),

        /**
        * <p>one.</p>
        */
        ONE("one"),

        /**
        * <p>two.</p>
        */
        TWO("two"),

        /**
        * <p>three.</p>
        */
        THREE("three"),

        /**
        * <p>local_one.</p>
        */
        LOCAL_ONE("local_one"),

        /**
        * <p>any.</p>
        */
        ANY("any"),

        /**
        * <p>serial.</p>
        */
        SERIAL("serial"),

        /**
        * <p>local_serial.</p>
        */
        LOCAL_SERIAL("local_serial"),
    }

    /**
    * <p>DB_CLIENT_CONNECTION_STATE</p>
    */
    @IncubatingApi
    enum class DbClientConnectionStateValues(val value: String) {

        /**
        * <p>idle.</p>
        */
        IDLE("idle"),

        /**
        * <p>used.</p>
        */
        USED("used"),
    }

    /**
    * <p>DB_CLIENT_CONNECTIONS_STATE</p>
    */
    @Deprecated("Replaced by `db.client.connection.state`.")
    enum class DbClientConnectionsStateValues(val value: String) {

        /**
        * <p>idle.</p>
        */
        IDLE("idle"),

        /**
        * <p>used.</p>
        */
        USED("used"),
    }

    /**
    * <p>DB_COSMOSDB_CONNECTION_MODE</p>
    */
    @Deprecated("Replaced by `azure.cosmosdb.connection.mode`.")
    enum class DbCosmosdbConnectionModeValues(val value: String) {

        /**
        * <p>Gateway (HTTP) connection.</p>
        */
        GATEWAY("gateway"),

        /**
        * <p>Direct connection.</p>
        */
        DIRECT("direct"),
    }

    /**
    * <p>DB_COSMOSDB_CONSISTENCY_LEVEL</p>
    */
    @Deprecated("Replaced by `azure.cosmosdb.consistency.level`.")
    enum class DbCosmosdbConsistencyLevelValues(val value: String) {

        /**
        * <p>strong.</p>
        */
        STRONG("Strong"),

        /**
        * <p>bounded_staleness.</p>
        */
        BOUNDED_STALENESS("BoundedStaleness"),

        /**
        * <p>session.</p>
        */
        SESSION("Session"),

        /**
        * <p>eventual.</p>
        */
        EVENTUAL("Eventual"),

        /**
        * <p>consistent_prefix.</p>
        */
        CONSISTENT_PREFIX("ConsistentPrefix"),
    }

    /**
    * <p>DB_COSMOSDB_OPERATION_TYPE</p>
    */
    @Deprecated("Removed, no replacement at this time.")
    enum class DbCosmosdbOperationTypeValues(val value: String) {

        /**
        * <p>batch.</p>
        */
        BATCH("batch"),

        /**
        * <p>create.</p>
        */
        CREATE("create"),

        /**
        * <p>delete.</p>
        */
        DELETE("delete"),

        /**
        * <p>execute.</p>
        */
        EXECUTE("execute"),

        /**
        * <p>execute_javascript.</p>
        */
        EXECUTE_JAVASCRIPT("execute_javascript"),

        /**
        * <p>invalid.</p>
        */
        INVALID("invalid"),

        /**
        * <p>head.</p>
        */
        HEAD("head"),

        /**
        * <p>head_feed.</p>
        */
        HEAD_FEED("head_feed"),

        /**
        * <p>patch.</p>
        */
        PATCH("patch"),

        /**
        * <p>query.</p>
        */
        QUERY("query"),

        /**
        * <p>query_plan.</p>
        */
        QUERY_PLAN("query_plan"),

        /**
        * <p>read.</p>
        */
        READ("read"),

        /**
        * <p>read_feed.</p>
        */
        READ_FEED("read_feed"),

        /**
        * <p>replace.</p>
        */
        REPLACE("replace"),

        /**
        * <p>upsert.</p>
        */
        UPSERT("upsert"),
    }

    /**
    * <p>DB_SYSTEM</p>
    */
    @Deprecated("Replaced by `db.system.name`.")
    enum class DbSystemValues(val value: String) {

        /**
        * <p>Some other SQL database. Fallback only. See notes.</p>
        */
        OTHER_SQL("other_sql"),

        /**
        * <p>Adabas (Adaptable Database System)</p>
        */
        ADABAS("adabas"),

        /**
        * <p>Deprecated, use <c>intersystems_cache</c> instead.</p>
        */
        CACHE("cache"),

        /**
        * <p>InterSystems Caché</p>
        */
        INTERSYSTEMS_CACHE("intersystems_cache"),

        /**
        * <p>Apache Cassandra</p>
        */
        CASSANDRA("cassandra"),

        /**
        * <p>ClickHouse</p>
        */
        CLICKHOUSE("clickhouse"),

        /**
        * <p>Deprecated, use <c>other_sql</c> instead.</p>
        */
        CLOUDSCAPE("cloudscape"),

        /**
        * <p>CockroachDB</p>
        */
        COCKROACHDB("cockroachdb"),

        /**
        * <p>Deprecated, no replacement at this time.</p>
        */
        COLDFUSION("coldfusion"),

        /**
        * <p>Microsoft Azure Cosmos DB</p>
        */
        COSMOSDB("cosmosdb"),

        /**
        * <p>Couchbase</p>
        */
        COUCHBASE("couchbase"),

        /**
        * <p>CouchDB</p>
        */
        COUCHDB("couchdb"),

        /**
        * <p>IBM Db2</p>
        */
        DB2("db2"),

        /**
        * <p>Apache Derby</p>
        */
        DERBY("derby"),

        /**
        * <p>Amazon DynamoDB</p>
        */
        DYNAMODB("dynamodb"),

        /**
        * <p>EnterpriseDB</p>
        */
        EDB("edb"),

        /**
        * <p>Elasticsearch</p>
        */
        ELASTICSEARCH("elasticsearch"),

        /**
        * <p>FileMaker</p>
        */
        FILEMAKER("filemaker"),

        /**
        * <p>Firebird</p>
        */
        FIREBIRD("firebird"),

        /**
        * <p>Deprecated, use <c>other_sql</c> instead.</p>
        */
        FIRSTSQL("firstsql"),

        /**
        * <p>Apache Geode</p>
        */
        GEODE("geode"),

        /**
        * <p>H2</p>
        */
        H2("h2"),

        /**
        * <p>SAP HANA</p>
        */
        HANADB("hanadb"),

        /**
        * <p>Apache HBase</p>
        */
        HBASE("hbase"),

        /**
        * <p>Apache Hive</p>
        */
        HIVE("hive"),

        /**
        * <p>HyperSQL DataBase</p>
        */
        HSQLDB("hsqldb"),

        /**
        * <p>InfluxDB</p>
        */
        INFLUXDB("influxdb"),

        /**
        * <p>Informix</p>
        */
        INFORMIX("informix"),

        /**
        * <p>Ingres</p>
        */
        INGRES("ingres"),

        /**
        * <p>InstantDB</p>
        */
        INSTANTDB("instantdb"),

        /**
        * <p>InterBase</p>
        */
        INTERBASE("interbase"),

        /**
        * <p>MariaDB</p>
        */
        MARIADB("mariadb"),

        /**
        * <p>SAP MaxDB</p>
        */
        MAXDB("maxdb"),

        /**
        * <p>Memcached</p>
        */
        MEMCACHED("memcached"),

        /**
        * <p>MongoDB</p>
        */
        MONGODB("mongodb"),

        /**
        * <p>Microsoft SQL Server</p>
        */
        MSSQL("mssql"),

        /**
        * <p>Deprecated, Microsoft SQL Server Compact is discontinued.</p>
        */
        MSSQLCOMPACT("mssqlcompact"),

        /**
        * <p>MySQL</p>
        */
        MYSQL("mysql"),

        /**
        * <p>Neo4j</p>
        */
        NEO4J("neo4j"),

        /**
        * <p>Netezza</p>
        */
        NETEZZA("netezza"),

        /**
        * <p>OpenSearch</p>
        */
        OPENSEARCH("opensearch"),

        /**
        * <p>Oracle Database</p>
        */
        ORACLE("oracle"),

        /**
        * <p>Pervasive PSQL</p>
        */
        PERVASIVE("pervasive"),

        /**
        * <p>PointBase</p>
        */
        POINTBASE("pointbase"),

        /**
        * <p>PostgreSQL</p>
        */
        POSTGRESQL("postgresql"),

        /**
        * <p>Progress Database</p>
        */
        PROGRESS("progress"),

        /**
        * <p>Redis</p>
        */
        REDIS("redis"),

        /**
        * <p>Amazon Redshift</p>
        */
        REDSHIFT("redshift"),

        /**
        * <p>Cloud Spanner</p>
        */
        SPANNER("spanner"),

        /**
        * <p>SQLite</p>
        */
        SQLITE("sqlite"),

        /**
        * <p>Sybase</p>
        */
        SYBASE("sybase"),

        /**
        * <p>Teradata</p>
        */
        TERADATA("teradata"),

        /**
        * <p>Trino</p>
        */
        TRINO("trino"),

        /**
        * <p>Vertica</p>
        */
        VERTICA("vertica"),
    }

    /**
    * <p>DB_SYSTEM_NAME</p>
    */
    enum class DbSystemNameValues(val value: String) {

        /**
        * <p>Some other SQL database. Fallback only.</p>
        */
        OTHER_SQL("other_sql"),

        /**
        * <p><a href="https://documentation.softwareag.com/?pf=adabas">Adabas (Adaptable Database System)</a></p>
        */
        SOFTWAREAG_ADABAS("softwareag.adabas"),

        /**
        * <p><a href="https://www.actian.com/databases/ingres/">Actian Ingres</a></p>
        */
        ACTIAN_INGRES("actian.ingres"),

        /**
        * <p><a href="https://aws.amazon.com/pm/dynamodb/">Amazon DynamoDB</a></p>
        */
        AWS_DYNAMODB("aws.dynamodb"),

        /**
        * <p><a href="https://aws.amazon.com/redshift/">Amazon Redshift</a></p>
        */
        AWS_REDSHIFT("aws.redshift"),

        /**
        * <p><a href="https://learn.microsoft.com/azure/cosmos-db">Azure Cosmos DB</a></p>
        */
        AZURE_COSMOSDB("azure.cosmosdb"),

        /**
        * <p><a href="https://www.intersystems.com/products/cache/">InterSystems Caché</a></p>
        */
        INTERSYSTEMS_CACHE("intersystems.cache"),

        /**
        * <p><a href="https://cassandra.apache.org/">Apache Cassandra</a></p>
        */
        CASSANDRA("cassandra"),

        /**
        * <p><a href="https://clickhouse.com/">ClickHouse</a></p>
        */
        CLICKHOUSE("clickhouse"),

        /**
        * <p><a href="https://www.cockroachlabs.com/">CockroachDB</a></p>
        */
        COCKROACHDB("cockroachdb"),

        /**
        * <p><a href="https://www.couchbase.com/">Couchbase</a></p>
        */
        COUCHBASE("couchbase"),

        /**
        * <p><a href="https://couchdb.apache.org/">Apache CouchDB</a></p>
        */
        COUCHDB("couchdb"),

        /**
        * <p><a href="https://db.apache.org/derby/">Apache Derby</a></p>
        */
        DERBY("derby"),

        /**
        * <p><a href="https://www.elastic.co/elasticsearch">Elasticsearch</a></p>
        */
        ELASTICSEARCH("elasticsearch"),

        /**
        * <p><a href="https://www.firebirdsql.org/">Firebird</a></p>
        */
        FIREBIRDSQL("firebirdsql"),

        /**
        * <p><a href="https://cloud.google.com/spanner">Google Cloud Spanner</a></p>
        */
        GCP_SPANNER("gcp.spanner"),

        /**
        * <p><a href="https://geode.apache.org/">Apache Geode</a></p>
        */
        GEODE("geode"),

        /**
        * <p><a href="https://h2database.com/">H2 Database</a></p>
        */
        H2DATABASE("h2database"),

        /**
        * <p><a href="https://hbase.apache.org/">Apache HBase</a></p>
        */
        HBASE("hbase"),

        /**
        * <p><a href="https://hive.apache.org/">Apache Hive</a></p>
        */
        HIVE("hive"),

        /**
        * <p><a href="https://hsqldb.org/">HyperSQL Database</a></p>
        */
        HSQLDB("hsqldb"),

        /**
        * <p><a href="https://www.ibm.com/db2">IBM Db2</a></p>
        */
        IBM_DB2("ibm.db2"),

        /**
        * <p><a href="https://www.ibm.com/products/informix">IBM Informix</a></p>
        */
        IBM_INFORMIX("ibm.informix"),

        /**
        * <p><a href="https://www.ibm.com/products/netezza">IBM Netezza</a></p>
        */
        IBM_NETEZZA("ibm.netezza"),

        /**
        * <p><a href="https://www.influxdata.com/">InfluxDB</a></p>
        */
        INFLUXDB("influxdb"),

        /**
        * <p><a href="https://www.instantdb.com/">Instant</a></p>
        */
        INSTANTDB("instantdb"),

        /**
        * <p><a href="https://mariadb.org/">MariaDB</a></p>
        */
        MARIADB("mariadb"),

        /**
        * <p><a href="https://memcached.org/">Memcached</a></p>
        */
        MEMCACHED("memcached"),

        /**
        * <p><a href="https://www.mongodb.com/">MongoDB</a></p>
        */
        MONGODB("mongodb"),

        /**
        * <p><a href="https://www.microsoft.com/sql-server">Microsoft SQL Server</a></p>
        */
        MICROSOFT_SQL_SERVER("microsoft.sql_server"),

        /**
        * <p><a href="https://www.mysql.com/">MySQL</a></p>
        */
        MYSQL("mysql"),

        /**
        * <p><a href="https://neo4j.com/">Neo4j</a></p>
        */
        NEO4J("neo4j"),

        /**
        * <p><a href="https://opensearch.org/">OpenSearch</a></p>
        */
        OPENSEARCH("opensearch"),

        /**
        * <p><a href="https://www.oracle.com/database/">Oracle Database</a></p>
        */
        ORACLE_DB("oracle.db"),

        /**
        * <p><a href="https://www.postgresql.org/">PostgreSQL</a></p>
        */
        POSTGRESQL("postgresql"),

        /**
        * <p><a href="https://redis.io/">Redis</a></p>
        */
        REDIS("redis"),

        /**
        * <p><a href="https://www.sap.com/products/technology-platform/hana/what-is-sap-hana.html">SAP HANA</a></p>
        */
        SAP_HANA("sap.hana"),

        /**
        * <p><a href="https://maxdb.sap.com/">SAP MaxDB</a></p>
        */
        SAP_MAXDB("sap.maxdb"),

        /**
        * <p><a href="https://www.sqlite.org/">SQLite</a></p>
        */
        SQLITE("sqlite"),

        /**
        * <p><a href="https://www.teradata.com/">Teradata</a></p>
        */
        TERADATA("teradata"),

        /**
        * <p><a href="https://trino.io/">Trino</a></p>
        */
        TRINO("trino"),
    }
}
