package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'hw'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object HwAttributes {
  

    /**
    * <p>Design capacity in Watts-hours or Amper-hours</p>
    */
    @IncubatingApi
    const val HW_BATTERY_CAPACITY: String = "hw.battery.capacity"

    /**
    * <p>Battery <a href="https://schemas.dmtf.org/wbem/cim-html/2.31.0/CIM_Battery.html">chemistry</a>, e.g. Lithium-Ion, Nickel-Cadmium, etc.</p>
    */
    @IncubatingApi
    const val HW_BATTERY_CHEMISTRY: String = "hw.battery.chemistry"

    /**
    * <p>The current state of the battery</p>
    */
    @IncubatingApi
    const val HW_BATTERY_STATE: String = "hw.battery.state"

    /**
    * <p>BIOS version of the hardware component</p>
    */
    @IncubatingApi
    const val HW_BIOS_VERSION: String = "hw.bios_version"

    /**
    * <p>Driver version for the hardware component</p>
    */
    @IncubatingApi
    const val HW_DRIVER_VERSION: String = "hw.driver_version"

    /**
    * <p>Type of the enclosure (useful for modular systems)</p>
    */
    @IncubatingApi
    const val HW_ENCLOSURE_TYPE: String = "hw.enclosure.type"

    /**
    * <p>Firmware version of the hardware component</p>
    */
    @IncubatingApi
    const val HW_FIRMWARE_VERSION: String = "hw.firmware_version"

    /**
    * <p>Type of task the GPU is performing</p>
    */
    @IncubatingApi
    const val HW_GPU_TASK: String = "hw.gpu.task"

    /**
    * <p>An identifier for the hardware component, unique within the monitored host</p>
    */
    @IncubatingApi
    const val HW_ID: String = "hw.id"

    /**
    * <p>Type of limit for hardware components</p>
    */
    @IncubatingApi
    const val HW_LIMIT_TYPE: String = "hw.limit_type"

    /**
    * <p>RAID Level of the logical disk</p>
    */
    @IncubatingApi
    const val HW_LOGICAL_DISK_RAID_LEVEL: String = "hw.logical_disk.raid_level"

    /**
    * <p>State of the logical disk space usage</p>
    */
    @IncubatingApi
    const val HW_LOGICAL_DISK_STATE: String = "hw.logical_disk.state"

    /**
    * <p>Type of the memory module</p>
    */
    @IncubatingApi
    const val HW_MEMORY_TYPE: String = "hw.memory.type"

    /**
    * <p>Descriptive model name of the hardware component</p>
    */
    @IncubatingApi
    const val HW_MODEL: String = "hw.model"

    /**
    * <p>An easily-recognizable name for the hardware component</p>
    */
    @IncubatingApi
    const val HW_NAME: String = "hw.name"

    /**
    * <p>Logical addresses of the adapter (e.g. IP address, or WWPN)</p>
    */
    @IncubatingApi
    const val HW_NETWORK_LOGICAL_ADDRESSES: String = "hw.network.logical_addresses"

    /**
    * <p>Physical address of the adapter (e.g. MAC address, or WWNN)</p>
    */
    @IncubatingApi
    const val HW_NETWORK_PHYSICAL_ADDRESS: String = "hw.network.physical_address"

    /**
    * <p>Unique identifier of the parent component (typically the <c>hw.id</c> attribute of the enclosure, or disk controller)</p>
    */
    @IncubatingApi
    const val HW_PARENT: String = "hw.parent"

    /**
    * <p><a href="https://wikipedia.org/wiki/S.M.A.R.T.">S.M.A.R.T.</a> (Self-Monitoring, Analysis, and Reporting Technology) attribute of the physical disk</p>
    */
    @IncubatingApi
    const val HW_PHYSICAL_DISK_SMART_ATTRIBUTE: String = "hw.physical_disk.smart_attribute"

    /**
    * <p>State of the physical disk endurance utilization</p>
    */
    @IncubatingApi
    const val HW_PHYSICAL_DISK_STATE: String = "hw.physical_disk.state"

    /**
    * <p>Type of the physical disk</p>
    */
    @IncubatingApi
    const val HW_PHYSICAL_DISK_TYPE: String = "hw.physical_disk.type"

    /**
    * <p>Location of the sensor</p>
    */
    @IncubatingApi
    const val HW_SENSOR_LOCATION: String = "hw.sensor_location"

    /**
    * <p>Serial number of the hardware component</p>
    */
    @IncubatingApi
    const val HW_SERIAL_NUMBER: String = "hw.serial_number"

    /**
    * <p>The current state of the component</p>
    */
    @IncubatingApi
    const val HW_STATE: String = "hw.state"

    /**
    * <p>Type of tape drive operation</p>
    */
    @IncubatingApi
    const val HW_TAPE_DRIVE_OPERATION_TYPE: String = "hw.tape_drive.operation_type"

    /**
    * <p>Type of the component</p>
    * <p>Notes:</p>
    * <p>Describes the category of the hardware component for which <c>hw.state</c> is being reported. For example, <c>hw.type=temperature</c> along with <c>hw.state=degraded</c> would indicate that the temperature of the hardware component has been reported as <c>degraded</c>.</p>
    */
    @IncubatingApi
    const val HW_TYPE: String = "hw.type"

    /**
    * <p>Vendor name of the hardware component</p>
    */
    @IncubatingApi
    const val HW_VENDOR: String = "hw.vendor"

    /**
    * <p>HW_BATTERY_STATE</p>
    */
    @IncubatingApi
    enum class HwBatteryStateValues(val value: String) {

        /**
        * <p>Charging</p>
        */
        CHARGING("charging"),

        /**
        * <p>Discharging</p>
        */
        DISCHARGING("discharging"),
    }

    /**
    * <p>HW_GPU_TASK</p>
    */
    @IncubatingApi
    enum class HwGpuTaskValues(val value: String) {

        /**
        * <p>Decoder</p>
        */
        DECODER("decoder"),

        /**
        * <p>Encoder</p>
        */
        ENCODER("encoder"),

        /**
        * <p>General</p>
        */
        GENERAL("general"),
    }

    /**
    * <p>HW_LIMIT_TYPE</p>
    */
    @IncubatingApi
    enum class HwLimitTypeValues(val value: String) {

        /**
        * <p>Critical</p>
        */
        CRITICAL("critical"),

        /**
        * <p>Degraded</p>
        */
        DEGRADED("degraded"),

        /**
        * <p>High Critical</p>
        */
        HIGH_CRITICAL("high.critical"),

        /**
        * <p>High Degraded</p>
        */
        HIGH_DEGRADED("high.degraded"),

        /**
        * <p>Low Critical</p>
        */
        LOW_CRITICAL("low.critical"),

        /**
        * <p>Low Degraded</p>
        */
        LOW_DEGRADED("low.degraded"),

        /**
        * <p>Maximum</p>
        */
        MAX("max"),

        /**
        * <p>Throttled</p>
        */
        THROTTLED("throttled"),

        /**
        * <p>Turbo</p>
        */
        TURBO("turbo"),
    }

    /**
    * <p>HW_LOGICAL_DISK_STATE</p>
    */
    @IncubatingApi
    enum class HwLogicalDiskStateValues(val value: String) {

        /**
        * <p>Used</p>
        */
        USED("used"),

        /**
        * <p>Free</p>
        */
        FREE("free"),
    }

    /**
    * <p>HW_PHYSICAL_DISK_STATE</p>
    */
    @IncubatingApi
    enum class HwPhysicalDiskStateValues(val value: String) {

        /**
        * <p>Remaining</p>
        */
        REMAINING("remaining"),
    }

    /**
    * <p>HW_STATE</p>
    */
    @IncubatingApi
    enum class HwStateValues(val value: String) {

        /**
        * <p>Degraded</p>
        */
        DEGRADED("degraded"),

        /**
        * <p>Failed</p>
        */
        FAILED("failed"),

        /**
        * <p>Needs Cleaning</p>
        */
        NEEDS_CLEANING("needs_cleaning"),

        /**
        * <p>OK</p>
        */
        OK("ok"),

        /**
        * <p>Predicted Failure</p>
        */
        PREDICTED_FAILURE("predicted_failure"),
    }

    /**
    * <p>HW_TAPE_DRIVE_OPERATION_TYPE</p>
    */
    @IncubatingApi
    enum class HwTapeDriveOperationTypeValues(val value: String) {

        /**
        * <p>Mount</p>
        */
        MOUNT("mount"),

        /**
        * <p>Unmount</p>
        */
        UNMOUNT("unmount"),

        /**
        * <p>Clean</p>
        */
        CLEAN("clean"),
    }

    /**
    * <p>HW_TYPE</p>
    */
    @IncubatingApi
    enum class HwTypeValues(val value: String) {

        /**
        * <p>Battery</p>
        */
        BATTERY("battery"),

        /**
        * <p>CPU</p>
        */
        CPU("cpu"),

        /**
        * <p>Disk controller</p>
        */
        DISK_CONTROLLER("disk_controller"),

        /**
        * <p>Enclosure</p>
        */
        ENCLOSURE("enclosure"),

        /**
        * <p>Fan</p>
        */
        FAN("fan"),

        /**
        * <p>GPU</p>
        */
        GPU("gpu"),

        /**
        * <p>Logical disk</p>
        */
        LOGICAL_DISK("logical_disk"),

        /**
        * <p>Memory</p>
        */
        MEMORY("memory"),

        /**
        * <p>Network</p>
        */
        NETWORK("network"),

        /**
        * <p>Physical disk</p>
        */
        PHYSICAL_DISK("physical_disk"),

        /**
        * <p>Power supply</p>
        */
        POWER_SUPPLY("power_supply"),

        /**
        * <p>Tape drive</p>
        */
        TAPE_DRIVE("tape_drive"),

        /**
        * <p>Temperature</p>
        */
        TEMPERATURE("temperature"),

        /**
        * <p>Voltage</p>
        */
        VOLTAGE("voltage"),
    }
}
