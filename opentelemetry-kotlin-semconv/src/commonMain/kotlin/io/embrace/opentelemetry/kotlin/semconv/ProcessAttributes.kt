package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'process'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object ProcessAttributes {
  

    /**
    * <p>Length of the process.command_args array</p>
    * <p>Notes:</p>
    * <p>This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.</p>
    */
    @IncubatingApi
    const val PROCESS_ARGS_COUNT: String = "process.args_count"

    /**
    * <p>The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in <c>proc/[pid]/cmdline</c>. On Windows, can be set to the first parameter extracted from <c>GetCommandLineW</c>.</p>
    */
    @IncubatingApi
    const val PROCESS_COMMAND: String = "process.command"

    /**
    * <p>All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from <c>proc/[pid]/cmdline</c>. For libc-based executables, this would be the full argv vector passed to <c>main</c>. SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data.</p>
    */
    @IncubatingApi
    const val PROCESS_COMMAND_ARGS: String = "process.command_args"

    /**
    * <p>The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of <c>GetCommandLineW</c>. Do not set this if you have to assemble it just for monitoring; use <c>process.command_args</c> instead. SHOULD NOT be collected by default unless there is sanitization that excludes sensitive data.</p>
    */
    @IncubatingApi
    const val PROCESS_COMMAND_LINE: String = "process.command_line"

    /**
    * <p>Specifies whether the context switches for this data point were voluntary or involuntary.</p>
    */
    @IncubatingApi
    const val PROCESS_CONTEXT_SWITCH_TYPE: String = "process.context_switch_type"

    /**
    * <p>Deprecated, use <c>cpu.mode</c> instead.</p>
    */
    @Deprecated("Replaced by `cpu.mode`.")
    const val PROCESS_CPU_STATE: String = "process.cpu.state"

    /**
    * <p>The date and time the process was created, in ISO 8601 format.</p>
    */
    @IncubatingApi
    const val PROCESS_CREATION_TIME: String = "process.creation.time"

    /**
    * <p>Process environment variables, <c><key></c> being the environment variable name, the value being the environment variable value.</p>
    * <p>Notes:</p>
    * <p>Examples:</p>
    * <ul>
    *   <li>an environment variable <c>USER</c> with value <c>"ubuntu"</c> SHOULD be recorded
    * as the <c>process.environment_variable.USER</c> attribute with value <c>"ubuntu"</c>.</li>
    *   <li>an environment variable <c>PATH</c> with value <c>"/usr/local/bin:/usr/bin"</c>
    * SHOULD be recorded as the <c>process.environment_variable.PATH</c> attribute
    * with value <c>"/usr/local/bin:/usr/bin"</c>.</li>
    * </ul>
    */
    @IncubatingApi
    const val PROCESS_ENVIRONMENT_VARIABLE: String = "process.environment_variable"

    /**
    * <p>The GNU build ID as found in the <c>.note.gnu.build-id</c> ELF section (hex string).</p>
    */
    @IncubatingApi
    const val PROCESS_EXECUTABLE_BUILD_ID_GNU: String = "process.executable.build_id.gnu"

    /**
    * <p>The Go build ID as retrieved by <c>go tool buildid <go executable></c>.</p>
    */
    @IncubatingApi
    const val PROCESS_EXECUTABLE_BUILD_ID_GO: String = "process.executable.build_id.go"

    /**
    * <p>Profiling specific build ID for executables. See the OTel specification for Profiles for more information.</p>
    */
    @IncubatingApi
    const val PROCESS_EXECUTABLE_BUILD_ID_HTLHASH: String = "process.executable.build_id.htlhash"

    /**
    * <p>"Deprecated, use <c>process.executable.build_id.htlhash</c> instead."</p>
    */
    @Deprecated("Replaced by `process.executable.build_id.htlhash`.")
    const val PROCESS_EXECUTABLE_BUILD_ID_PROFILING: String = "process.executable.build_id.profiling"

    /**
    * <p>The name of the process executable. On Linux based systems, this SHOULD be set to the base name of the target of <c>/proc/[pid]/exe</c>. On Windows, this SHOULD be set to the base name of <c>GetProcessImageFileNameW</c>.</p>
    */
    @IncubatingApi
    const val PROCESS_EXECUTABLE_NAME: String = "process.executable.name"

    /**
    * <p>The full path to the process executable. On Linux based systems, can be set to the target of <c>proc/[pid]/exe</c>. On Windows, can be set to the result of <c>GetProcessImageFileNameW</c>.</p>
    */
    @IncubatingApi
    const val PROCESS_EXECUTABLE_PATH: String = "process.executable.path"

    /**
    * <p>The exit code of the process.</p>
    */
    @IncubatingApi
    const val PROCESS_EXIT_CODE: String = "process.exit.code"

    /**
    * <p>The date and time the process exited, in ISO 8601 format.</p>
    */
    @IncubatingApi
    const val PROCESS_EXIT_TIME: String = "process.exit.time"

    /**
    * <p>The PID of the process's group leader. This is also the process group ID (PGID) of the process.</p>
    */
    @IncubatingApi
    const val PROCESS_GROUP_LEADER_PID: String = "process.group_leader.pid"

    /**
    * <p>Whether the process is connected to an interactive shell.</p>
    */
    @IncubatingApi
    const val PROCESS_INTERACTIVE: String = "process.interactive"

    /**
    * <p>The control group associated with the process.</p>
    * <p>Notes:</p>
    * <p>Control groups (cgroups) are a kernel feature used to organize and manage process resources. This attribute provides the path(s) to the cgroup(s) associated with the process, which should match the contents of the <a href="https://man7.org/linux/man-pages/man7/cgroups.7.html">/proc/[PID]/cgroup</a> file.</p>
    */
    @IncubatingApi
    const val PROCESS_LINUX_CGROUP: String = "process.linux.cgroup"

    /**
    * <p>The username of the user that owns the process.</p>
    */
    @IncubatingApi
    const val PROCESS_OWNER: String = "process.owner"

    /**
    * <p>The type of page fault for this data point. Type <c>major</c> is for major/hard page faults, and <c>minor</c> is for minor/soft page faults.</p>
    */
    @IncubatingApi
    const val PROCESS_PAGING_FAULT_TYPE: String = "process.paging.fault_type"

    /**
    * <p>Parent Process identifier (PPID).</p>
    */
    @IncubatingApi
    const val PROCESS_PARENT_PID: String = "process.parent_pid"

    /**
    * <p>Process identifier (PID).</p>
    */
    @IncubatingApi
    const val PROCESS_PID: String = "process.pid"

    /**
    * <p>The real user ID (RUID) of the process.</p>
    */
    @IncubatingApi
    const val PROCESS_REAL_USER_ID: String = "process.real_user.id"

    /**
    * <p>The username of the real user of the process.</p>
    */
    @IncubatingApi
    const val PROCESS_REAL_USER_NAME: String = "process.real_user.name"

    /**
    * <p>An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.</p>
    */
    @IncubatingApi
    const val PROCESS_RUNTIME_DESCRIPTION: String = "process.runtime.description"

    /**
    * <p>The name of the runtime of this process.</p>
    */
    @IncubatingApi
    const val PROCESS_RUNTIME_NAME: String = "process.runtime.name"

    /**
    * <p>The version of the runtime of this process, as returned by the runtime without modification.</p>
    */
    @IncubatingApi
    const val PROCESS_RUNTIME_VERSION: String = "process.runtime.version"

    /**
    * <p>The saved user ID (SUID) of the process.</p>
    */
    @IncubatingApi
    const val PROCESS_SAVED_USER_ID: String = "process.saved_user.id"

    /**
    * <p>The username of the saved user.</p>
    */
    @IncubatingApi
    const val PROCESS_SAVED_USER_NAME: String = "process.saved_user.name"

    /**
    * <p>The PID of the process's session leader. This is also the session ID (SID) of the process.</p>
    */
    @IncubatingApi
    const val PROCESS_SESSION_LEADER_PID: String = "process.session_leader.pid"

    /**
    * <p>Process title (proctitle)</p>
    * <p>Notes:</p>
    * <p>In many Unix-like systems, process title (proctitle), is the string that represents the name or command line of a running process, displayed by system monitoring tools like ps, top, and htop.</p>
    */
    @IncubatingApi
    const val PROCESS_TITLE: String = "process.title"

    /**
    * <p>The effective user ID (EUID) of the process.</p>
    */
    @IncubatingApi
    const val PROCESS_USER_ID: String = "process.user.id"

    /**
    * <p>The username of the effective user of the process.</p>
    */
    @IncubatingApi
    const val PROCESS_USER_NAME: String = "process.user.name"

    /**
    * <p>Virtual process identifier.</p>
    * <p>Notes:</p>
    * <p>The process ID within a PID namespace. This is not necessarily unique across all processes on the host but it is unique within the process namespace that the process exists within.</p>
    */
    @IncubatingApi
    const val PROCESS_VPID: String = "process.vpid"

    /**
    * <p>The working directory of the process.</p>
    */
    @IncubatingApi
    const val PROCESS_WORKING_DIRECTORY: String = "process.working_directory"

    /**
    * <p>PROCESS_CONTEXT_SWITCH_TYPE</p>
    */
    @IncubatingApi
    enum class ProcessContextSwitchTypeValues(val value: String) {

        /**
        * <p>voluntary.</p>
        */
        VOLUNTARY("voluntary"),

        /**
        * <p>involuntary.</p>
        */
        INVOLUNTARY("involuntary"),
    }

    /**
    * <p>PROCESS_CPU_STATE</p>
    */
    @Deprecated("Replaced by `cpu.mode`.")
    enum class ProcessCpuStateValues(val value: String) {

        /**
        * <p>system.</p>
        */
        SYSTEM("system"),

        /**
        * <p>user.</p>
        */
        USER("user"),

        /**
        * <p>wait.</p>
        */
        WAIT("wait"),
    }

    /**
    * <p>PROCESS_PAGING_FAULT_TYPE</p>
    */
    @IncubatingApi
    enum class ProcessPagingFaultTypeValues(val value: String) {

        /**
        * <p>major.</p>
        */
        MAJOR("major"),

        /**
        * <p>minor.</p>
        */
        MINOR("minor"),
    }
}
