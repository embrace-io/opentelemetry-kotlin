package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'cicd'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object CicdAttributes {
  

    /**
    * <p>The kind of action a pipeline run is performing.</p>
    */
    @IncubatingApi
    const val CICD_PIPELINE_ACTION_NAME: String = "cicd.pipeline.action.name"

    /**
    * <p>The human readable name of the pipeline within a CI/CD system.</p>
    */
    @IncubatingApi
    const val CICD_PIPELINE_NAME: String = "cicd.pipeline.name"

    /**
    * <p>The result of a pipeline run.</p>
    */
    @IncubatingApi
    const val CICD_PIPELINE_RESULT: String = "cicd.pipeline.result"

    /**
    * <p>The unique identifier of a pipeline run within a CI/CD system.</p>
    */
    @IncubatingApi
    const val CICD_PIPELINE_RUN_ID: String = "cicd.pipeline.run.id"

    /**
    * <p>The pipeline run goes through these states during its lifecycle.</p>
    */
    @IncubatingApi
    const val CICD_PIPELINE_RUN_STATE: String = "cicd.pipeline.run.state"

    /**
    * <p>The <a href="https://wikipedia.org/wiki/URL">URL</a> of the pipeline run, providing the complete address in order to locate and identify the pipeline run.</p>
    */
    @IncubatingApi
    const val CICD_PIPELINE_RUN_URL_FULL: String = "cicd.pipeline.run.url.full"

    /**
    * <p>The human readable name of a task within a pipeline. Task here most closely aligns with a <a href="https://wikipedia.org/wiki/Pipeline_(computing)">computing process</a> in a pipeline. Other terms for tasks include commands, steps, and procedures.</p>
    */
    @IncubatingApi
    const val CICD_PIPELINE_TASK_NAME: String = "cicd.pipeline.task.name"

    /**
    * <p>The unique identifier of a task run within a pipeline.</p>
    */
    @IncubatingApi
    const val CICD_PIPELINE_TASK_RUN_ID: String = "cicd.pipeline.task.run.id"

    /**
    * <p>The result of a task run.</p>
    */
    @IncubatingApi
    const val CICD_PIPELINE_TASK_RUN_RESULT: String = "cicd.pipeline.task.run.result"

    /**
    * <p>The <a href="https://wikipedia.org/wiki/URL">URL</a> of the pipeline task run, providing the complete address in order to locate and identify the pipeline task run.</p>
    */
    @IncubatingApi
    const val CICD_PIPELINE_TASK_RUN_URL_FULL: String = "cicd.pipeline.task.run.url.full"

    /**
    * <p>The type of the task within a pipeline.</p>
    */
    @IncubatingApi
    const val CICD_PIPELINE_TASK_TYPE: String = "cicd.pipeline.task.type"

    /**
    * <p>The name of a component of the CICD system.</p>
    */
    @IncubatingApi
    const val CICD_SYSTEM_COMPONENT: String = "cicd.system.component"

    /**
    * <p>The unique identifier of a worker within a CICD system.</p>
    */
    @IncubatingApi
    const val CICD_WORKER_ID: String = "cicd.worker.id"

    /**
    * <p>The name of a worker within a CICD system.</p>
    */
    @IncubatingApi
    const val CICD_WORKER_NAME: String = "cicd.worker.name"

    /**
    * <p>The state of a CICD worker / agent.</p>
    */
    @IncubatingApi
    const val CICD_WORKER_STATE: String = "cicd.worker.state"

    /**
    * <p>The <a href="https://wikipedia.org/wiki/URL">URL</a> of the worker, providing the complete address in order to locate and identify the worker.</p>
    */
    @IncubatingApi
    const val CICD_WORKER_URL_FULL: String = "cicd.worker.url.full"

    /**
    * <p>CICD_PIPELINE_ACTION_NAME</p>
    */
    @IncubatingApi
    enum class CicdPipelineActionNameValues(val value: String) {

        /**
        * <p>The pipeline run is executing a build.</p>
        */
        BUILD("BUILD"),

        /**
        * <p>The pipeline run is executing.</p>
        */
        RUN("RUN"),

        /**
        * <p>The pipeline run is executing a sync.</p>
        */
        SYNC("SYNC"),
    }

    /**
    * <p>CICD_PIPELINE_RESULT</p>
    */
    @IncubatingApi
    enum class CicdPipelineResultValues(val value: String) {

        /**
        * <p>The pipeline run finished successfully.</p>
        */
        SUCCESS("success"),

        /**
        * <p>The pipeline run did not finish successfully, eg. due to a compile error or a failing test. Such failures are usually detected by non-zero exit codes of the tools executed in the pipeline run.</p>
        */
        FAILURE("failure"),

        /**
        * <p>The pipeline run failed due to an error in the CICD system, eg. due to the worker being killed.</p>
        */
        ERROR("error"),

        /**
        * <p>A timeout caused the pipeline run to be interrupted.</p>
        */
        TIMEOUT("timeout"),

        /**
        * <p>The pipeline run was cancelled, eg. by a user manually cancelling the pipeline run.</p>
        */
        CANCELLATION("cancellation"),

        /**
        * <p>The pipeline run was skipped, eg. due to a precondition not being met.</p>
        */
        SKIP("skip"),
    }

    /**
    * <p>CICD_PIPELINE_RUN_STATE</p>
    */
    @IncubatingApi
    enum class CicdPipelineRunStateValues(val value: String) {

        /**
        * <p>The run pending state spans from the event triggering the pipeline run until the execution of the run starts (eg. time spent in a queue, provisioning agents, creating run resources).</p>
        */
        PENDING("pending"),

        /**
        * <p>The executing state spans the execution of any run tasks (eg. build, test).</p>
        */
        EXECUTING("executing"),

        /**
        * <p>The finalizing state spans from when the run has finished executing (eg. cleanup of run resources).</p>
        */
        FINALIZING("finalizing"),
    }

    /**
    * <p>CICD_PIPELINE_TASK_RUN_RESULT</p>
    */
    @IncubatingApi
    enum class CicdPipelineTaskRunResultValues(val value: String) {

        /**
        * <p>The task run finished successfully.</p>
        */
        SUCCESS("success"),

        /**
        * <p>The task run did not finish successfully, eg. due to a compile error or a failing test. Such failures are usually detected by non-zero exit codes of the tools executed in the task run.</p>
        */
        FAILURE("failure"),

        /**
        * <p>The task run failed due to an error in the CICD system, eg. due to the worker being killed.</p>
        */
        ERROR("error"),

        /**
        * <p>A timeout caused the task run to be interrupted.</p>
        */
        TIMEOUT("timeout"),

        /**
        * <p>The task run was cancelled, eg. by a user manually cancelling the task run.</p>
        */
        CANCELLATION("cancellation"),

        /**
        * <p>The task run was skipped, eg. due to a precondition not being met.</p>
        */
        SKIP("skip"),
    }

    /**
    * <p>CICD_PIPELINE_TASK_TYPE</p>
    */
    @IncubatingApi
    enum class CicdPipelineTaskTypeValues(val value: String) {

        /**
        * <p>build</p>
        */
        BUILD("build"),

        /**
        * <p>test</p>
        */
        TEST("test"),

        /**
        * <p>deploy</p>
        */
        DEPLOY("deploy"),
    }

    /**
    * <p>CICD_WORKER_STATE</p>
    */
    @IncubatingApi
    enum class CicdWorkerStateValues(val value: String) {

        /**
        * <p>The worker is not performing work for the CICD system. It is available to the CICD system to perform work on (online / idle).</p>
        */
        AVAILABLE("available"),

        /**
        * <p>The worker is performing work for the CICD system.</p>
        */
        BUSY("busy"),

        /**
        * <p>The worker is not available to the CICD system (disconnected / down).</p>
        */
        OFFLINE("offline"),
    }
}
