package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'container'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object ContainerAttributes {
  

    /**
    * <p>The command used to run the container (i.e. the command name).</p>
    * <p>Notes:</p>
    * <p>If using embedded credentials or sensitive data, it is recommended to remove them to prevent potential leakage.</p>
    */
    @IncubatingApi
    const val CONTAINER_COMMAND: String = "container.command"

    /**
    * <p>All the command arguments (including the command/executable itself) run by the container.</p>
    */
    @IncubatingApi
    const val CONTAINER_COMMAND_ARGS: String = "container.command_args"

    /**
    * <p>The full command run by the container as a single string representing the full command.</p>
    */
    @IncubatingApi
    const val CONTAINER_COMMAND_LINE: String = "container.command_line"

    /**
    * <p>Deprecated, use <c>cpu.mode</c> instead.</p>
    */
    @Deprecated("Replaced by `cpu.mode`.")
    const val CONTAINER_CPU_STATE: String = "container.cpu.state"

    /**
    * <p>The name of the CSI (<a href="https://github.com/container-storage-interface/spec">Container Storage Interface</a>) plugin used by the volume.</p>
    * <p>Notes:</p>
    * <p>This can sometimes be referred to as a "driver" in CSI implementations. This should represent the <c>name</c> field of the GetPluginInfo RPC.</p>
    */
    @IncubatingApi
    const val CONTAINER_CSI_PLUGIN_NAME: String = "container.csi.plugin.name"

    /**
    * <p>The unique volume ID returned by the CSI (<a href="https://github.com/container-storage-interface/spec">Container Storage Interface</a>) plugin.</p>
    * <p>Notes:</p>
    * <p>This can sometimes be referred to as a "volume handle" in CSI implementations. This should represent the <c>Volume.volume_id</c> field in CSI spec.</p>
    */
    @IncubatingApi
    const val CONTAINER_CSI_VOLUME_ID: String = "container.csi.volume.id"

    /**
    * <p>Container ID. Usually a UUID, as for example used to <a href="https://docs.docker.com/engine/containers/run/#container-identification">identify Docker containers</a>. The UUID might be abbreviated.</p>
    */
    @IncubatingApi
    const val CONTAINER_ID: String = "container.id"

    /**
    * <p>Runtime specific image identifier. Usually a hash algorithm followed by a UUID.</p>
    * <p>Notes:</p>
    * <p>Docker defines a sha256 of the image id; <c>container.image.id</c> corresponds to the <c>Image</c> field from the Docker container inspect <a href="https://docs.docker.com/engine/api/v1.43/#tag/Container/operation/ContainerInspect">API</a> endpoint.
    * K8s defines a link to the container registry repository with digest <c>"imageID": "registry.azurecr.io /namespace/service/dockerfile@sha256:bdeabd40c3a8a492eaf9e8e44d0ebbb84bac7ee25ac0cf8a7159d25f62555625"</c>.
    * The ID is assigned by the container runtime and can vary in different environments. Consider using <c>oci.manifest.digest</c> if it is important to identify the same image in different environments/runtimes.</p>
    */
    @IncubatingApi
    const val CONTAINER_IMAGE_ID: String = "container.image.id"

    /**
    * <p>Name of the image the container was built on.</p>
    */
    @IncubatingApi
    const val CONTAINER_IMAGE_NAME: String = "container.image.name"

    /**
    * <p>Repo digests of the container image as provided by the container runtime.</p>
    * <p>Notes:</p>
    * <p><a href="https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect">Docker</a> and <a href="https://github.com/kubernetes/cri-api/blob/c75ef5b473bbe2d0a4fc92f82235efd665ea8e9f/pkg/apis/runtime/v1/api.proto#L1237-L1238">CRI</a> report those under the <c>RepoDigests</c> field.</p>
    */
    @IncubatingApi
    const val CONTAINER_IMAGE_REPO_DIGESTS: String = "container.image.repo_digests"

    /**
    * <p>Container image tags. An example can be found in <a href="https://docs.docker.com/engine/api/v1.43/#tag/Image/operation/ImageInspect">Docker Image Inspect</a>. Should be only the <c><tag></c> section of the full name for example from <c>registry.example.com/my-org/my-image:<tag></c>.</p>
    */
    @IncubatingApi
    const val CONTAINER_IMAGE_TAGS: String = "container.image.tags"

    /**
    * <p>Container labels, <c><key></c> being the label name, the value being the label value.</p>
    * <p>Notes:</p>
    * <p>For example, a docker container label <c>app</c> with value <c>nginx</c> SHOULD be recorded as the <c>container.label.app</c> attribute with value <c>"nginx"</c>.</p>
    */
    @IncubatingApi
    const val CONTAINER_LABEL: String = "container.label"

    /**
    * <p>Deprecated, use <c>container.label</c> instead.</p>
    */
    @Deprecated("Replaced by `container.label`.")
    const val CONTAINER_LABELS: String = "container.labels"

    /**
    * <p>Container name used by container runtime.</p>
    */
    @IncubatingApi
    const val CONTAINER_NAME: String = "container.name"

    /**
    * <p>The container runtime managing this container.</p>
    */
    @Deprecated("Replaced by `container.runtime.name`.")
    const val CONTAINER_RUNTIME: String = "container.runtime"

    /**
    * <p>A description about the runtime which could include, for example details about the CRI/API version being used or other customisations.</p>
    */
    @IncubatingApi
    const val CONTAINER_RUNTIME_DESCRIPTION: String = "container.runtime.description"

    /**
    * <p>The container runtime managing this container.</p>
    */
    @IncubatingApi
    const val CONTAINER_RUNTIME_NAME: String = "container.runtime.name"

    /**
    * <p>The version of the runtime of this process, as returned by the runtime without modification.</p>
    */
    @IncubatingApi
    const val CONTAINER_RUNTIME_VERSION: String = "container.runtime.version"

    /**
    * <p>CONTAINER_CPU_STATE</p>
    */
    @Deprecated("Replaced by `cpu.mode`.")
    enum class ContainerCpuStateValues(val value: String) {

        /**
        * <p>When tasks of the cgroup are in user mode (Linux). When all container processes are in user mode (Windows).</p>
        */
        USER("user"),

        /**
        * <p>When CPU is used by the system (host OS)</p>
        */
        SYSTEM("system"),

        /**
        * <p>When tasks of the cgroup are in kernel mode (Linux). When all container processes are in kernel mode (Windows).</p>
        */
        KERNEL("kernel"),
    }
}
