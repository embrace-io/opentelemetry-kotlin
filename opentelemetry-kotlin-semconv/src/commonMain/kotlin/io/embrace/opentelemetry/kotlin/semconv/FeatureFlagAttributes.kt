package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'feature_flag'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object FeatureFlagAttributes {
  

    /**
    * <p>The unique identifier for the flag evaluation context. For example, the targeting key.</p>
    */
    @IncubatingApi
    const val FEATURE_FLAG_CONTEXT_ID: String = "feature_flag.context.id"

    /**
    * <p>Deprecated, use <c>error.message</c> instead.</p>
    */
    @Deprecated("Replaced by `error.message`.")
    const val FEATURE_FLAG_EVALUATION_ERROR_MESSAGE: String = "feature_flag.evaluation.error.message"

    /**
    * <p>Deprecated, use <c>feature_flag.result.reason</c> instead.</p>
    */
    @Deprecated("Replaced by `feature_flag.result.reason`.")
    const val FEATURE_FLAG_EVALUATION_REASON: String = "feature_flag.evaluation.reason"

    /**
    * <p>The lookup key of the feature flag.</p>
    */
    @IncubatingApi
    const val FEATURE_FLAG_KEY: String = "feature_flag.key"

    /**
    * <p>Identifies the feature flag provider.</p>
    */
    @IncubatingApi
    const val FEATURE_FLAG_PROVIDER_NAME: String = "feature_flag.provider.name"

    /**
    * <p>The reason code which shows how a feature flag value was determined.</p>
    */
    @IncubatingApi
    const val FEATURE_FLAG_RESULT_REASON: String = "feature_flag.result.reason"

    /**
    * <p>The evaluated value of the feature flag.</p>
    * <p>Notes:</p>
    * <p>With some feature flag providers, feature flag results can be quite large or contain private or sensitive details.
    * Because of this, <c>feature_flag.result.variant</c> is often the preferred attribute if it is available.</p>
    * <p>It may be desirable to redact or otherwise limit the size and scope of <c>feature_flag.result.value</c> if possible.
    * Because the evaluated flag value is unstructured and may be any type, it is left to the instrumentation author to determine how best to achieve this.</p>
    */
    @IncubatingApi
    const val FEATURE_FLAG_RESULT_VALUE: String = "feature_flag.result.value"

    /**
    * <p>A semantic identifier for an evaluated flag value.</p>
    * <p>Notes:</p>
    * <p>A semantic identifier, commonly referred to as a variant, provides a means
    * for referring to a value without including the value itself. This can
    * provide additional context for understanding the meaning behind a value.
    * For example, the variant <c>red</c> maybe be used for the value <c>#c05543</c>.</p>
    */
    @IncubatingApi
    const val FEATURE_FLAG_RESULT_VARIANT: String = "feature_flag.result.variant"

    /**
    * <p>The identifier of the <a href="https://openfeature.dev/specification/glossary/#flag-set">flag set</a> to which the feature flag belongs.</p>
    */
    @IncubatingApi
    const val FEATURE_FLAG_SET_ID: String = "feature_flag.set.id"

    /**
    * <p>Deprecated, use <c>feature_flag.result.variant</c> instead.</p>
    */
    @Deprecated("Replaced by `feature_flag.result.variant`.")
    const val FEATURE_FLAG_VARIANT: String = "feature_flag.variant"

    /**
    * <p>The version of the ruleset used during the evaluation. This may be any stable value which uniquely identifies the ruleset.</p>
    */
    @IncubatingApi
    const val FEATURE_FLAG_VERSION: String = "feature_flag.version"

    /**
    * <p>FEATURE_FLAG_EVALUATION_REASON</p>
    */
    @Deprecated("Replaced by `feature_flag.result.reason`.")
    enum class FeatureFlagEvaluationReasonValues(val value: String) {

        /**
        * <p>The resolved value is static (no dynamic evaluation).</p>
        */
        STATIC("static"),

        /**
        * <p>The resolved value fell back to a pre-configured value (no dynamic evaluation occurred or dynamic evaluation yielded no result).</p>
        */
        DEFAULT("default"),

        /**
        * <p>The resolved value was the result of a dynamic evaluation, such as a rule or specific user-targeting.</p>
        */
        TARGETING_MATCH("targeting_match"),

        /**
        * <p>The resolved value was the result of pseudorandom assignment.</p>
        */
        SPLIT("split"),

        /**
        * <p>The resolved value was retrieved from cache.</p>
        */
        CACHED("cached"),

        /**
        * <p>The resolved value was the result of the flag being disabled in the management system.</p>
        */
        DISABLED("disabled"),

        /**
        * <p>The reason for the resolved value could not be determined.</p>
        */
        UNKNOWN("unknown"),

        /**
        * <p>The resolved value is non-authoritative or possibly out of date</p>
        */
        STALE("stale"),

        /**
        * <p>The resolved value was the result of an error.</p>
        */
        ERROR("error"),
    }

    /**
    * <p>FEATURE_FLAG_RESULT_REASON</p>
    */
    @IncubatingApi
    enum class FeatureFlagResultReasonValues(val value: String) {

        /**
        * <p>The resolved value is static (no dynamic evaluation).</p>
        */
        STATIC("static"),

        /**
        * <p>The resolved value fell back to a pre-configured value (no dynamic evaluation occurred or dynamic evaluation yielded no result).</p>
        */
        DEFAULT("default"),

        /**
        * <p>The resolved value was the result of a dynamic evaluation, such as a rule or specific user-targeting.</p>
        */
        TARGETING_MATCH("targeting_match"),

        /**
        * <p>The resolved value was the result of pseudorandom assignment.</p>
        */
        SPLIT("split"),

        /**
        * <p>The resolved value was retrieved from cache.</p>
        */
        CACHED("cached"),

        /**
        * <p>The resolved value was the result of the flag being disabled in the management system.</p>
        */
        DISABLED("disabled"),

        /**
        * <p>The reason for the resolved value could not be determined.</p>
        */
        UNKNOWN("unknown"),

        /**
        * <p>The resolved value is non-authoritative or possibly out of date</p>
        */
        STALE("stale"),

        /**
        * <p>The resolved value was the result of an error.</p>
        */
        ERROR("error"),
    }
}
