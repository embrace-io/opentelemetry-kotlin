package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'net'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object NetAttributes {
  

    /**
    * <p>Deprecated, use <c>network.local.address</c>.</p>
    */
    @Deprecated("Replaced by `network.local.address`.")
    const val NET_HOST_IP: String = "net.host.ip"

    /**
    * <p>Deprecated, use <c>server.address</c>.</p>
    */
    @Deprecated("Replaced by `server.address`.")
    const val NET_HOST_NAME: String = "net.host.name"

    /**
    * <p>Deprecated, use <c>server.port</c>.</p>
    */
    @Deprecated("Replaced by `server.port`.")
    const val NET_HOST_PORT: String = "net.host.port"

    /**
    * <p>Deprecated, use <c>network.peer.address</c>.</p>
    */
    @Deprecated("Replaced by `network.peer.address`.")
    const val NET_PEER_IP: String = "net.peer.ip"

    /**
    * <p>Deprecated, use <c>server.address</c> on client spans and <c>client.address</c> on server spans.</p>
    */
    @Deprecated("Replaced by `server.address` on client spans and `client.address` on server spans.")
    const val NET_PEER_NAME: String = "net.peer.name"

    /**
    * <p>Deprecated, use <c>server.port</c> on client spans and <c>client.port</c> on server spans.</p>
    */
    @Deprecated("Replaced by `server.port` on client spans and `client.port` on server spans.")
    const val NET_PEER_PORT: String = "net.peer.port"

    /**
    * <p>Deprecated, use <c>network.protocol.name</c>.</p>
    */
    @Deprecated("Replaced by `network.protocol.name`.")
    const val NET_PROTOCOL_NAME: String = "net.protocol.name"

    /**
    * <p>Deprecated, use <c>network.protocol.version</c>.</p>
    */
    @Deprecated("Replaced by `network.protocol.version`.")
    const val NET_PROTOCOL_VERSION: String = "net.protocol.version"

    /**
    * <p>Deprecated, use <c>network.transport</c> and <c>network.type</c>.</p>
    */
    @Deprecated("Split to `network.transport` and `network.type`.")
    const val NET_SOCK_FAMILY: String = "net.sock.family"

    /**
    * <p>Deprecated, use <c>network.local.address</c>.</p>
    */
    @Deprecated("Replaced by `network.local.address`.")
    const val NET_SOCK_HOST_ADDR: String = "net.sock.host.addr"

    /**
    * <p>Deprecated, use <c>network.local.port</c>.</p>
    */
    @Deprecated("Replaced by `network.local.port`.")
    const val NET_SOCK_HOST_PORT: String = "net.sock.host.port"

    /**
    * <p>Deprecated, use <c>network.peer.address</c>.</p>
    */
    @Deprecated("Replaced by `network.peer.address`.")
    const val NET_SOCK_PEER_ADDR: String = "net.sock.peer.addr"

    /**
    * <p>Deprecated, no replacement at this time.</p>
    */
    @Deprecated("Removed. No replacement at this time.")
    const val NET_SOCK_PEER_NAME: String = "net.sock.peer.name"

    /**
    * <p>Deprecated, use <c>network.peer.port</c>.</p>
    */
    @Deprecated("Replaced by `network.peer.port`.")
    const val NET_SOCK_PEER_PORT: String = "net.sock.peer.port"

    /**
    * <p>Deprecated, use <c>network.transport</c>.</p>
    */
    @Deprecated("Replaced by `network.transport`.")
    const val NET_TRANSPORT: String = "net.transport"

    /**
    * <p>NET_SOCK_FAMILY</p>
    */
    @Deprecated("Split to `network.transport` and `network.type`.")
    enum class NetSockFamilyValues(val value: String) {

        /**
        * <p>IPv4 address</p>
        */
        INET("inet"),

        /**
        * <p>IPv6 address</p>
        */
        INET6("inet6"),

        /**
        * <p>Unix domain socket path</p>
        */
        UNIX("unix"),
    }

    /**
    * <p>NET_TRANSPORT</p>
    */
    @Deprecated("Replaced by `network.transport`.")
    enum class NetTransportValues(val value: String) {

        /**
        * <p>ip_tcp.</p>
        */
        IP_TCP("ip_tcp"),

        /**
        * <p>ip_udp.</p>
        */
        IP_UDP("ip_udp"),

        /**
        * <p>Named or anonymous pipe.</p>
        */
        PIPE("pipe"),

        /**
        * <p>In-process communication.</p>
        */
        INPROC("inproc"),

        /**
        * <p>Something else (non IP-based).</p>
        */
        OTHER("other"),
    }
}
