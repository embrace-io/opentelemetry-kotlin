package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'telemetry'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object TelemetryAttributes {
  

    /**
    * <p>The name of the auto instrumentation agent or distribution, if used.</p>
    * <p>Notes:</p>
    * <p>Official auto instrumentation agents and distributions SHOULD set the <c>telemetry.distro.name</c> attribute to
    * a string starting with <c>opentelemetry-</c>, e.g. <c>opentelemetry-java-instrumentation</c>.</p>
    */
    @IncubatingApi
    const val TELEMETRY_DISTRO_NAME: String = "telemetry.distro.name"

    /**
    * <p>The version string of the auto instrumentation agent or distribution, if used.</p>
    */
    @IncubatingApi
    const val TELEMETRY_DISTRO_VERSION: String = "telemetry.distro.version"

    /**
    * <p>The language of the telemetry SDK.</p>
    */
    const val TELEMETRY_SDK_LANGUAGE: String = "telemetry.sdk.language"

    /**
    * <p>The name of the telemetry SDK as defined above.</p>
    * <p>Notes:</p>
    * <p>The OpenTelemetry SDK MUST set the <c>telemetry.sdk.name</c> attribute to <c>opentelemetry</c>.
    * If another SDK, like a fork or a vendor-provided implementation, is used, this SDK MUST set the
    * <c>telemetry.sdk.name</c> attribute to the fully-qualified class or module name of this SDK's main entry point
    * or another suitable identifier depending on the language.
    * The identifier <c>opentelemetry</c> is reserved and MUST NOT be used in this case.
    * All custom identifiers SHOULD be stable across different versions of an implementation.</p>
    */
    const val TELEMETRY_SDK_NAME: String = "telemetry.sdk.name"

    /**
    * <p>The version string of the telemetry SDK.</p>
    */
    const val TELEMETRY_SDK_VERSION: String = "telemetry.sdk.version"

    /**
    * <p>TELEMETRY_SDK_LANGUAGE</p>
    */
    enum class TelemetrySdkLanguageValues(val value: String) {

        /**
        * <p>cpp.</p>
        */
        CPP("cpp"),

        /**
        * <p>dotnet.</p>
        */
        DOTNET("dotnet"),

        /**
        * <p>erlang.</p>
        */
        ERLANG("erlang"),

        /**
        * <p>go.</p>
        */
        GO("go"),

        /**
        * <p>java.</p>
        */
        JAVA("java"),

        /**
        * <p>nodejs.</p>
        */
        NODEJS("nodejs"),

        /**
        * <p>php.</p>
        */
        PHP("php"),

        /**
        * <p>python.</p>
        */
        PYTHON("python"),

        /**
        * <p>ruby.</p>
        */
        RUBY("ruby"),

        /**
        * <p>rust.</p>
        */
        RUST("rust"),

        /**
        * <p>swift.</p>
        */
        SWIFT("swift"),

        /**
        * <p>webjs.</p>
        */
        WEBJS("webjs"),
    }
}
