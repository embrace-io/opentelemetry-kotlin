package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'otel'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object OtelAttributes {
  

    /**
    * <p>A name uniquely identifying the instance of the OpenTelemetry component within its containing SDK instance.</p>
    * <p>Notes:</p>
    * <p>Implementations SHOULD ensure a low cardinality for this attribute, even across application or SDK restarts.
    * E.g. implementations MUST NOT use UUIDs as values for this attribute.</p>
    * <p>Implementations MAY achieve these goals by following a <c><otel.component.type>/<instance-counter></c> pattern, e.g. <c>batching_span_processor/0</c>.
    * Hereby <c>otel.component.type</c> refers to the corresponding attribute value of the component.</p>
    * <p>The value of <c>instance-counter</c> MAY be automatically assigned by the component and uniqueness within the enclosing SDK instance MUST be guaranteed.
    * For example, <c><instance-counter></c> MAY be implemented by using a monotonically increasing counter (starting with <c>0</c>), which is incremented every time an
    * instance of the given component type is started.</p>
    * <p>With this implementation, for example the first Batching Span Processor would have <c>batching_span_processor/0</c>
    * as <c>otel.component.name</c>, the second one <c>batching_span_processor/1</c> and so on.
    * These values will therefore be reused in the case of an application restart.</p>
    */
    @IncubatingApi
    const val OTEL_COMPONENT_NAME: String = "otel.component.name"

    /**
    * <p>A name identifying the type of the OpenTelemetry component.</p>
    * <p>Notes:</p>
    * <p>If none of the standardized values apply, implementations SHOULD use the language-defined name of the type.
    * E.g. for Java the fully qualified classname SHOULD be used in this case.</p>
    */
    @IncubatingApi
    const val OTEL_COMPONENT_TYPE: String = "otel.component.type"

    /**
    * <p>Deprecated. Use the <c>otel.scope.name</c> attribute</p>
    */
    @Deprecated("Replaced by `otel.scope.name`.")
    const val OTEL_LIBRARY_NAME: String = "otel.library.name"

    /**
    * <p>Deprecated. Use the <c>otel.scope.version</c> attribute.</p>
    */
    @Deprecated("Replaced by `otel.scope.version`.")
    const val OTEL_LIBRARY_VERSION: String = "otel.library.version"

    /**
    * <p>The name of the instrumentation scope - (<c>InstrumentationScope.Name</c> in OTLP).</p>
    */
    const val OTEL_SCOPE_NAME: String = "otel.scope.name"

    /**
    * <p>The schema URL of the instrumentation scope.</p>
    */
    @IncubatingApi
    const val OTEL_SCOPE_SCHEMA_URL: String = "otel.scope.schema_url"

    /**
    * <p>The version of the instrumentation scope - (<c>InstrumentationScope.Version</c> in OTLP).</p>
    */
    const val OTEL_SCOPE_VERSION: String = "otel.scope.version"

    /**
    * <p>Determines whether the span has a parent span, and if so, <a href="https://opentelemetry.io/docs/specs/otel/trace/api/#isremote">whether it is a remote parent</a></p>
    */
    @IncubatingApi
    const val OTEL_SPAN_PARENT_ORIGIN: String = "otel.span.parent.origin"

    /**
    * <p>The result value of the sampler for this span</p>
    */
    @IncubatingApi
    const val OTEL_SPAN_SAMPLING_RESULT: String = "otel.span.sampling_result"

    /**
    * <p>Name of the code, either "OK" or "ERROR". MUST NOT be set if the status code is UNSET.</p>
    */
    const val OTEL_STATUS_CODE: String = "otel.status_code"

    /**
    * <p>Description of the Status if it has a value, otherwise not set.</p>
    */
    const val OTEL_STATUS_DESCRIPTION: String = "otel.status_description"

    /**
    * <p>OTEL_COMPONENT_TYPE</p>
    */
    @IncubatingApi
    enum class OtelComponentTypeValues(val value: String) {

        /**
        * <p>The builtin SDK batching span processor</p>
        */
        BATCHING_SPAN_PROCESSOR("batching_span_processor"),

        /**
        * <p>The builtin SDK simple span processor</p>
        */
        SIMPLE_SPAN_PROCESSOR("simple_span_processor"),

        /**
        * <p>The builtin SDK batching log record processor</p>
        */
        BATCHING_LOG_PROCESSOR("batching_log_processor"),

        /**
        * <p>The builtin SDK simple log record processor</p>
        */
        SIMPLE_LOG_PROCESSOR("simple_log_processor"),

        /**
        * <p>OTLP span exporter over gRPC with protobuf serialization</p>
        */
        OTLP_GRPC_SPAN_EXPORTER("otlp_grpc_span_exporter"),

        /**
        * <p>OTLP span exporter over HTTP with protobuf serialization</p>
        */
        OTLP_HTTP_SPAN_EXPORTER("otlp_http_span_exporter"),

        /**
        * <p>OTLP span exporter over HTTP with JSON serialization</p>
        */
        OTLP_HTTP_JSON_SPAN_EXPORTER("otlp_http_json_span_exporter"),

        /**
        * <p>Zipkin span exporter over HTTP</p>
        */
        ZIPKIN_HTTP_SPAN_EXPORTER("zipkin_http_span_exporter"),

        /**
        * <p>OTLP log record exporter over gRPC with protobuf serialization</p>
        */
        OTLP_GRPC_LOG_EXPORTER("otlp_grpc_log_exporter"),

        /**
        * <p>OTLP log record exporter over HTTP with protobuf serialization</p>
        */
        OTLP_HTTP_LOG_EXPORTER("otlp_http_log_exporter"),

        /**
        * <p>OTLP log record exporter over HTTP with JSON serialization</p>
        */
        OTLP_HTTP_JSON_LOG_EXPORTER("otlp_http_json_log_exporter"),

        /**
        * <p>The builtin SDK periodically exporting metric reader</p>
        */
        PERIODIC_METRIC_READER("periodic_metric_reader"),

        /**
        * <p>OTLP metric exporter over gRPC with protobuf serialization</p>
        */
        OTLP_GRPC_METRIC_EXPORTER("otlp_grpc_metric_exporter"),

        /**
        * <p>OTLP metric exporter over HTTP with protobuf serialization</p>
        */
        OTLP_HTTP_METRIC_EXPORTER("otlp_http_metric_exporter"),

        /**
        * <p>OTLP metric exporter over HTTP with JSON serialization</p>
        */
        OTLP_HTTP_JSON_METRIC_EXPORTER("otlp_http_json_metric_exporter"),

        /**
        * <p>Prometheus metric exporter over HTTP with the default text-based format</p>
        */
        PROMETHEUS_HTTP_TEXT_METRIC_EXPORTER("prometheus_http_text_metric_exporter"),
    }

    /**
    * <p>OTEL_SPAN_PARENT_ORIGIN</p>
    */
    @IncubatingApi
    enum class OtelSpanParentOriginValues(val value: String) {

        /**
        * <p>The span does not have a parent, it is a root span</p>
        */
        NONE("none"),

        /**
        * <p>The span has a parent and the parent's span context <a href="https://opentelemetry.io/docs/specs/otel/trace/api/#isremote">isRemote()</a> is false</p>
        */
        LOCAL("local"),

        /**
        * <p>The span has a parent and the parent's span context <a href="https://opentelemetry.io/docs/specs/otel/trace/api/#isremote">isRemote()</a> is true</p>
        */
        REMOTE("remote"),
    }

    /**
    * <p>OTEL_SPAN_SAMPLING_RESULT</p>
    */
    @IncubatingApi
    enum class OtelSpanSamplingResultValues(val value: String) {

        /**
        * <p>The span is not sampled and not recording</p>
        */
        DROP("DROP"),

        /**
        * <p>The span is not sampled, but recording</p>
        */
        RECORD_ONLY("RECORD_ONLY"),

        /**
        * <p>The span is sampled and recording</p>
        */
        RECORD_AND_SAMPLE("RECORD_AND_SAMPLE"),
    }

    /**
    * <p>OTEL_STATUS_CODE</p>
    */
    enum class OtelStatusCodeValues(val value: String) {

        /**
        * <p>The operation has been validated by an Application developer or Operator to have completed successfully.</p>
        */
        OK("OK"),

        /**
        * <p>The operation contains an error.</p>
        */
        ERROR("ERROR"),
    }
}
