package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'tls'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object TlsAttributes {
  

    /**
    * <p>String indicating the <a href="https://datatracker.ietf.org/doc/html/rfc5246#appendix-A.5">cipher</a> used during the current connection.</p>
    * <p>Notes:</p>
    * <p>The values allowed for <c>tls.cipher</c> MUST be one of the <c>Descriptions</c> of the <a href="https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#table-tls-parameters-4">registered TLS Cipher Suits</a>.</p>
    */
    @IncubatingApi
    const val TLS_CIPHER: String = "tls.cipher"

    /**
    * <p>PEM-encoded stand-alone certificate offered by the client. This is usually mutually-exclusive of <c>client.certificate_chain</c> since this value also exists in that list.</p>
    */
    @IncubatingApi
    const val TLS_CLIENT_CERTIFICATE: String = "tls.client.certificate"

    /**
    * <p>Array of PEM-encoded certificates that make up the certificate chain offered by the client. This is usually mutually-exclusive of <c>client.certificate</c> since that value should be the first certificate in the chain.</p>
    */
    @IncubatingApi
    const val TLS_CLIENT_CERTIFICATE_CHAIN: String = "tls.client.certificate_chain"

    /**
    * <p>Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.</p>
    */
    @IncubatingApi
    const val TLS_CLIENT_HASH_MD5: String = "tls.client.hash.md5"

    /**
    * <p>Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.</p>
    */
    @IncubatingApi
    const val TLS_CLIENT_HASH_SHA1: String = "tls.client.hash.sha1"

    /**
    * <p>Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.</p>
    */
    @IncubatingApi
    const val TLS_CLIENT_HASH_SHA256: String = "tls.client.hash.sha256"

    /**
    * <p>Distinguished name of <a href="https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6">subject</a> of the issuer of the x.509 certificate presented by the client.</p>
    */
    @IncubatingApi
    const val TLS_CLIENT_ISSUER: String = "tls.client.issuer"

    /**
    * <p>A hash that identifies clients based on how they perform an SSL/TLS handshake.</p>
    */
    @IncubatingApi
    const val TLS_CLIENT_JA3: String = "tls.client.ja3"

    /**
    * <p>Date/Time indicating when client certificate is no longer considered valid.</p>
    */
    @IncubatingApi
    const val TLS_CLIENT_NOT_AFTER: String = "tls.client.not_after"

    /**
    * <p>Date/Time indicating when client certificate is first considered valid.</p>
    */
    @IncubatingApi
    const val TLS_CLIENT_NOT_BEFORE: String = "tls.client.not_before"

    /**
    * <p>Deprecated, use <c>server.address</c> instead.</p>
    */
    @Deprecated("Replaced by `server.address`.")
    const val TLS_CLIENT_SERVER_NAME: String = "tls.client.server_name"

    /**
    * <p>Distinguished name of subject of the x.509 certificate presented by the client.</p>
    */
    @IncubatingApi
    const val TLS_CLIENT_SUBJECT: String = "tls.client.subject"

    /**
    * <p>Array of ciphers offered by the client during the client hello.</p>
    */
    @IncubatingApi
    const val TLS_CLIENT_SUPPORTED_CIPHERS: String = "tls.client.supported_ciphers"

    /**
    * <p>String indicating the curve used for the given cipher, when applicable</p>
    */
    @IncubatingApi
    const val TLS_CURVE: String = "tls.curve"

    /**
    * <p>Boolean flag indicating if the TLS negotiation was successful and transitioned to an encrypted tunnel.</p>
    */
    @IncubatingApi
    const val TLS_ESTABLISHED: String = "tls.established"

    /**
    * <p>String indicating the protocol being tunneled. Per the values in the <a href="https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids">IANA registry</a>, this string should be lower case.</p>
    */
    @IncubatingApi
    const val TLS_NEXT_PROTOCOL: String = "tls.next_protocol"

    /**
    * <p>Normalized lowercase protocol name parsed from original string of the negotiated <a href="https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values">SSL/TLS protocol version</a></p>
    */
    @IncubatingApi
    const val TLS_PROTOCOL_NAME: String = "tls.protocol.name"

    /**
    * <p>Numeric part of the version parsed from the original string of the negotiated <a href="https://docs.openssl.org/1.1.1/man3/SSL_get_version/#return-values">SSL/TLS protocol version</a></p>
    */
    @IncubatingApi
    const val TLS_PROTOCOL_VERSION: String = "tls.protocol.version"

    /**
    * <p>Boolean flag indicating if this TLS connection was resumed from an existing TLS negotiation.</p>
    */
    @IncubatingApi
    const val TLS_RESUMED: String = "tls.resumed"

    /**
    * <p>PEM-encoded stand-alone certificate offered by the server. This is usually mutually-exclusive of <c>server.certificate_chain</c> since this value also exists in that list.</p>
    */
    @IncubatingApi
    const val TLS_SERVER_CERTIFICATE: String = "tls.server.certificate"

    /**
    * <p>Array of PEM-encoded certificates that make up the certificate chain offered by the server. This is usually mutually-exclusive of <c>server.certificate</c> since that value should be the first certificate in the chain.</p>
    */
    @IncubatingApi
    const val TLS_SERVER_CERTIFICATE_CHAIN: String = "tls.server.certificate_chain"

    /**
    * <p>Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.</p>
    */
    @IncubatingApi
    const val TLS_SERVER_HASH_MD5: String = "tls.server.hash.md5"

    /**
    * <p>Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.</p>
    */
    @IncubatingApi
    const val TLS_SERVER_HASH_SHA1: String = "tls.server.hash.sha1"

    /**
    * <p>Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.</p>
    */
    @IncubatingApi
    const val TLS_SERVER_HASH_SHA256: String = "tls.server.hash.sha256"

    /**
    * <p>Distinguished name of <a href="https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6">subject</a> of the issuer of the x.509 certificate presented by the client.</p>
    */
    @IncubatingApi
    const val TLS_SERVER_ISSUER: String = "tls.server.issuer"

    /**
    * <p>A hash that identifies servers based on how they perform an SSL/TLS handshake.</p>
    */
    @IncubatingApi
    const val TLS_SERVER_JA3S: String = "tls.server.ja3s"

    /**
    * <p>Date/Time indicating when server certificate is no longer considered valid.</p>
    */
    @IncubatingApi
    const val TLS_SERVER_NOT_AFTER: String = "tls.server.not_after"

    /**
    * <p>Date/Time indicating when server certificate is first considered valid.</p>
    */
    @IncubatingApi
    const val TLS_SERVER_NOT_BEFORE: String = "tls.server.not_before"

    /**
    * <p>Distinguished name of subject of the x.509 certificate presented by the server.</p>
    */
    @IncubatingApi
    const val TLS_SERVER_SUBJECT: String = "tls.server.subject"

    /**
    * <p>TLS_PROTOCOL_NAME</p>
    */
    @IncubatingApi
    enum class TlsProtocolNameValues(val value: String) {

        /**
        * <p>ssl.</p>
        */
        SSL("ssl"),

        /**
        * <p>tls.</p>
        */
        TLS("tls"),
    }
}
