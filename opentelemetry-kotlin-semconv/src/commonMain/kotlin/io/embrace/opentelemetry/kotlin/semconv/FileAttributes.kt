package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'file'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object FileAttributes {
  

    /**
    * <p>Time when the file was last accessed, in ISO 8601 format.</p>
    * <p>Notes:</p>
    * <p>This attribute might not be supported by some file systems — NFS, FAT32, in embedded OS, etc.</p>
    */
    @IncubatingApi
    const val FILE_ACCESSED: String = "file.accessed"

    /**
    * <p>Array of file attributes.</p>
    * <p>Notes:</p>
    * <p>Attributes names depend on the OS or file system. Here’s a non-exhaustive list of values expected for this attribute: <c>archive</c>, <c>compressed</c>, <c>directory</c>, <c>encrypted</c>, <c>execute</c>, <c>hidden</c>, <c>immutable</c>, <c>journaled</c>, <c>read</c>, <c>readonly</c>, <c>symbolic link</c>, <c>system</c>, <c>temporary</c>, <c>write</c>.</p>
    */
    @IncubatingApi
    const val FILE_ATTRIBUTES: String = "file.attributes"

    /**
    * <p>Time when the file attributes or metadata was last changed, in ISO 8601 format.</p>
    * <p>Notes:</p>
    * <p><c>file.changed</c> captures the time when any of the file's properties or attributes (including the content) are changed, while <c>file.modified</c> captures the timestamp when the file content is modified.</p>
    */
    @IncubatingApi
    const val FILE_CHANGED: String = "file.changed"

    /**
    * <p>Time when the file was created, in ISO 8601 format.</p>
    * <p>Notes:</p>
    * <p>This attribute might not be supported by some file systems — NFS, FAT32, in embedded OS, etc.</p>
    */
    @IncubatingApi
    const val FILE_CREATED: String = "file.created"

    /**
    * <p>Directory where the file is located. It should include the drive letter, when appropriate.</p>
    */
    @IncubatingApi
    const val FILE_DIRECTORY: String = "file.directory"

    /**
    * <p>File extension, excluding the leading dot.</p>
    * <p>Notes:</p>
    * <p>When the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").</p>
    */
    @IncubatingApi
    const val FILE_EXTENSION: String = "file.extension"

    /**
    * <p>Name of the fork. A fork is additional data associated with a filesystem object.</p>
    * <p>Notes:</p>
    * <p>On Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist.
    * On NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: C:\path\to\filename.extension:some_fork_name, and some_fork_name is the value that should populate <c>fork_name</c>. <c>filename.extension</c> should populate <c>file.name</c>, and <c>extension</c> should populate <c>file.extension</c>. The full path, <c>file.path</c>, will include the fork name.</p>
    */
    @IncubatingApi
    const val FILE_FORK_NAME: String = "file.fork_name"

    /**
    * <p>Primary Group ID (GID) of the file.</p>
    */
    @IncubatingApi
    const val FILE_GROUP_ID: String = "file.group.id"

    /**
    * <p>Primary group name of the file.</p>
    */
    @IncubatingApi
    const val FILE_GROUP_NAME: String = "file.group.name"

    /**
    * <p>Inode representing the file in the filesystem.</p>
    */
    @IncubatingApi
    const val FILE_INODE: String = "file.inode"

    /**
    * <p>Mode of the file in octal representation.</p>
    */
    @IncubatingApi
    const val FILE_MODE: String = "file.mode"

    /**
    * <p>Time when the file content was last modified, in ISO 8601 format.</p>
    */
    @IncubatingApi
    const val FILE_MODIFIED: String = "file.modified"

    /**
    * <p>Name of the file including the extension, without the directory.</p>
    */
    @IncubatingApi
    const val FILE_NAME: String = "file.name"

    /**
    * <p>The user ID (UID) or security identifier (SID) of the file owner.</p>
    */
    @IncubatingApi
    const val FILE_OWNER_ID: String = "file.owner.id"

    /**
    * <p>Username of the file owner.</p>
    */
    @IncubatingApi
    const val FILE_OWNER_NAME: String = "file.owner.name"

    /**
    * <p>Full path to the file, including the file name. It should include the drive letter, when appropriate.</p>
    */
    @IncubatingApi
    const val FILE_PATH: String = "file.path"

    /**
    * <p>File size in bytes.</p>
    */
    @IncubatingApi
    const val FILE_SIZE: String = "file.size"

    /**
    * <p>Path to the target of a symbolic link.</p>
    * <p>Notes:</p>
    * <p>This attribute is only applicable to symbolic links.</p>
    */
    @IncubatingApi
    const val FILE_SYMBOLIC_LINK_TARGET_PATH: String = "file.symbolic_link.target_path"
}
