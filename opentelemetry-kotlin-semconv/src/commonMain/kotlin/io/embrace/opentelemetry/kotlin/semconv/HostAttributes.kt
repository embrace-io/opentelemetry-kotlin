package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'host'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object HostAttributes {
  

    /**
    * <p>The CPU architecture the host system is running on.</p>
    */
    @IncubatingApi
    const val HOST_ARCH: String = "host.arch"

    /**
    * <p>The amount of level 2 memory cache available to the processor (in Bytes).</p>
    */
    @IncubatingApi
    const val HOST_CPU_CACHE_L2_SIZE: String = "host.cpu.cache.l2.size"

    /**
    * <p>Family or generation of the CPU.</p>
    */
    @IncubatingApi
    const val HOST_CPU_FAMILY: String = "host.cpu.family"

    /**
    * <p>Model identifier. It provides more granular information about the CPU, distinguishing it from other CPUs within the same family.</p>
    */
    @IncubatingApi
    const val HOST_CPU_MODEL_ID: String = "host.cpu.model.id"

    /**
    * <p>Model designation of the processor.</p>
    */
    @IncubatingApi
    const val HOST_CPU_MODEL_NAME: String = "host.cpu.model.name"

    /**
    * <p>Stepping or core revisions.</p>
    */
    @IncubatingApi
    const val HOST_CPU_STEPPING: String = "host.cpu.stepping"

    /**
    * <p>Processor manufacturer identifier. A maximum 12-character string.</p>
    * <p>Notes:</p>
    * <p><a href="https://wiki.osdev.org/CPUID">CPUID</a> command returns the vendor ID string in EBX, EDX and ECX registers. Writing these to memory in this order results in a 12-character string.</p>
    */
    @IncubatingApi
    const val HOST_CPU_VENDOR_ID: String = "host.cpu.vendor.id"

    /**
    * <p>Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider. For non-containerized systems, this should be the <c>machine-id</c>. See the table below for the sources to use to determine the <c>machine-id</c> based on operating system.</p>
    */
    @IncubatingApi
    const val HOST_ID: String = "host.id"

    /**
    * <p>VM image ID or host OS image ID. For Cloud, this value is from the provider.</p>
    */
    @IncubatingApi
    const val HOST_IMAGE_ID: String = "host.image.id"

    /**
    * <p>Name of the VM image or OS install the host was instantiated from.</p>
    */
    @IncubatingApi
    const val HOST_IMAGE_NAME: String = "host.image.name"

    /**
    * <p>The version string of the VM image or host OS as defined in <a href="/docs/resource/README.md#version-attributes">Version Attributes</a>.</p>
    */
    @IncubatingApi
    const val HOST_IMAGE_VERSION: String = "host.image.version"

    /**
    * <p>Available IP addresses of the host, excluding loopback interfaces.</p>
    * <p>Notes:</p>
    * <p>IPv4 Addresses MUST be specified in dotted-quad notation. IPv6 addresses MUST be specified in the <a href="https://www.rfc-editor.org/rfc/rfc5952.html">RFC 5952</a> format.</p>
    */
    @IncubatingApi
    const val HOST_IP: String = "host.ip"

    /**
    * <p>Available MAC addresses of the host, excluding loopback interfaces.</p>
    * <p>Notes:</p>
    * <p>MAC Addresses MUST be represented in <a href="https://standards.ieee.org/wp-content/uploads/import/documents/tutorials/eui.pdf">IEEE RA hexadecimal form</a>: as hyphen-separated octets in uppercase hexadecimal form from most to least significant.</p>
    */
    @IncubatingApi
    const val HOST_MAC: String = "host.mac"

    /**
    * <p>Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.</p>
    */
    @IncubatingApi
    const val HOST_NAME: String = "host.name"

    /**
    * <p>Type of host. For Cloud, this must be the machine type.</p>
    */
    @IncubatingApi
    const val HOST_TYPE: String = "host.type"

    /**
    * <p>HOST_ARCH</p>
    */
    @IncubatingApi
    enum class HostArchValues(val value: String) {

        /**
        * <p>AMD64</p>
        */
        AMD64("amd64"),

        /**
        * <p>ARM32</p>
        */
        ARM32("arm32"),

        /**
        * <p>ARM64</p>
        */
        ARM64("arm64"),

        /**
        * <p>Itanium</p>
        */
        IA64("ia64"),

        /**
        * <p>32-bit PowerPC</p>
        */
        PPC32("ppc32"),

        /**
        * <p>64-bit PowerPC</p>
        */
        PPC64("ppc64"),

        /**
        * <p>IBM z/Architecture</p>
        */
        S390X("s390x"),

        /**
        * <p>32-bit x86</p>
        */
        X86("x86"),
    }
}
