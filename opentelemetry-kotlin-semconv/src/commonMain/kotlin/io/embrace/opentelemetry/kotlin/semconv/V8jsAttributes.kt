package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'v8js'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object V8jsAttributes {
  

    /**
    * <p>The type of garbage collection.</p>
    */
    @IncubatingApi
    const val V8JS_GC_TYPE: String = "v8js.gc.type"

    /**
    * <p>The name of the space type of heap memory.</p>
    * <p>Notes:</p>
    * <p>Value can be retrieved from value <c>space_name</c> of <a href="https://nodejs.org/api/v8.html#v8getheapspacestatistics"><c>v8.getHeapSpaceStatistics()</c></a></p>
    */
    @IncubatingApi
    const val V8JS_HEAP_SPACE_NAME: String = "v8js.heap.space.name"

    /**
    * <p>V8JS_GC_TYPE</p>
    */
    @IncubatingApi
    enum class V8jsGcTypeValues(val value: String) {

        /**
        * <p>Major (Mark Sweep Compact).</p>
        */
        MAJOR("major"),

        /**
        * <p>Minor (Scavenge).</p>
        */
        MINOR("minor"),

        /**
        * <p>Incremental (Incremental Marking).</p>
        */
        INCREMENTAL("incremental"),

        /**
        * <p>Weak Callbacks (Process Weak Callbacks).</p>
        */
        WEAKCB("weakcb"),
    }

    /**
    * <p>V8JS_HEAP_SPACE_NAME</p>
    */
    @IncubatingApi
    enum class V8jsHeapSpaceNameValues(val value: String) {

        /**
        * <p>New memory space.</p>
        */
        NEW_SPACE("new_space"),

        /**
        * <p>Old memory space.</p>
        */
        OLD_SPACE("old_space"),

        /**
        * <p>Code memory space.</p>
        */
        CODE_SPACE("code_space"),

        /**
        * <p>Map memory space.</p>
        */
        MAP_SPACE("map_space"),

        /**
        * <p>Large object memory space.</p>
        */
        LARGE_OBJECT_SPACE("large_object_space"),
    }
}
