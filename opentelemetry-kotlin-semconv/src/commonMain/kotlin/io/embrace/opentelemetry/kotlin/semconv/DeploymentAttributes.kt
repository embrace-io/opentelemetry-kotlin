package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'deployment'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object DeploymentAttributes {
  

    /**
    * <p>Deprecated, use <c>deployment.environment.name</c> instead.</p>
    */
    @Deprecated("Replaced by `deployment.environment.name`.")
    const val DEPLOYMENT_ENVIRONMENT: String = "deployment.environment"

    /**
    * <p>Name of the <a href="https://wikipedia.org/wiki/Deployment_environment">deployment environment</a> (aka deployment tier).</p>
    * <p>Notes:</p>
    * <p><c>deployment.environment.name</c> does not affect the uniqueness constraints defined through
    * the <c>service.namespace</c>, <c>service.name</c> and <c>service.instance.id</c> resource attributes.
    * This implies that resources carrying the following attribute combinations MUST be
    * considered to be identifying the same service:</p>
    * <ul>
    *   <li><c>service.name=frontend</c>, <c>deployment.environment.name=production</c></li>
    *   <li><c>service.name=frontend</c>, <c>deployment.environment.name=staging</c>.</li>
    * </ul>
    */
    @IncubatingApi
    const val DEPLOYMENT_ENVIRONMENT_NAME: String = "deployment.environment.name"

    /**
    * <p>The id of the deployment.</p>
    */
    @IncubatingApi
    const val DEPLOYMENT_ID: String = "deployment.id"

    /**
    * <p>The name of the deployment.</p>
    */
    @IncubatingApi
    const val DEPLOYMENT_NAME: String = "deployment.name"

    /**
    * <p>The status of the deployment.</p>
    */
    @IncubatingApi
    const val DEPLOYMENT_STATUS: String = "deployment.status"

    /**
    * <p>DEPLOYMENT_STATUS</p>
    */
    @IncubatingApi
    enum class DeploymentStatusValues(val value: String) {

        /**
        * <p>failed</p>
        */
        FAILED("failed"),

        /**
        * <p>succeeded</p>
        */
        SUCCEEDED("succeeded"),
    }
}
