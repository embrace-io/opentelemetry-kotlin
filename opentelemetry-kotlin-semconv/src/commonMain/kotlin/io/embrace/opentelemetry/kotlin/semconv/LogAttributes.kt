package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'log'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object LogAttributes {
  

    /**
    * <p>The basename of the file.</p>
    */
    @IncubatingApi
    const val LOG_FILE_NAME: String = "log.file.name"

    /**
    * <p>The basename of the file, with symlinks resolved.</p>
    */
    @IncubatingApi
    const val LOG_FILE_NAME_RESOLVED: String = "log.file.name_resolved"

    /**
    * <p>The full path to the file.</p>
    */
    @IncubatingApi
    const val LOG_FILE_PATH: String = "log.file.path"

    /**
    * <p>The full path to the file, with symlinks resolved.</p>
    */
    @IncubatingApi
    const val LOG_FILE_PATH_RESOLVED: String = "log.file.path_resolved"

    /**
    * <p>The stream associated with the log. See below for a list of well-known values.</p>
    */
    @IncubatingApi
    const val LOG_IOSTREAM: String = "log.iostream"

    /**
    * <p>The complete original Log Record.</p>
    * <p>Notes:</p>
    * <p>This value MAY be added when processing a Log Record which was originally transmitted as a string or equivalent data type AND the Body field of the Log Record does not contain the same value. (e.g. a syslog or a log record read from a file.)</p>
    */
    @IncubatingApi
    const val LOG_RECORD_ORIGINAL: String = "log.record.original"

    /**
    * <p>A unique identifier for the Log Record.</p>
    * <p>Notes:</p>
    * <p>If an id is provided, other log records with the same id will be considered duplicates and can be removed safely. This means, that two distinguishable log records MUST have different values.
    * The id MAY be an <a href="https://github.com/ulid/spec">Universally Unique Lexicographically Sortable Identifier (ULID)</a>, but other identifiers (e.g. UUID) may be used as needed.</p>
    */
    @IncubatingApi
    const val LOG_RECORD_UID: String = "log.record.uid"

    /**
    * <p>LOG_IOSTREAM</p>
    */
    @IncubatingApi
    enum class LogIostreamValues(val value: String) {

        /**
        * <p>Logs from stdout stream</p>
        */
        STDOUT("stdout"),

        /**
        * <p>Events from stderr stream</p>
        */
        STDERR("stderr"),
    }
}
