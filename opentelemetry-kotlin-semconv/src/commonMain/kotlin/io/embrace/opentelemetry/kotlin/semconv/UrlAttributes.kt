package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'url'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object UrlAttributes {
  

    /**
    * <p>Domain extracted from the <c>url.full</c>, such as "opentelemetry.io".</p>
    * <p>Notes:</p>
    * <p>In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the domain field. If the URL contains a <a href="https://www.rfc-editor.org/rfc/rfc2732#section-2">literal IPv6 address</a> enclosed by <c>[</c> and <c>]</c>, the <c>[</c> and <c>]</c> characters should also be captured in the domain field.</p>
    */
    @IncubatingApi
    const val URL_DOMAIN: String = "url.domain"

    /**
    * <p>The file extension extracted from the <c>url.full</c>, excluding the leading dot.</p>
    * <p>Notes:</p>
    * <p>The file extension is only set if it exists, as not every url has a file extension. When the file name has multiple extensions <c>example.tar.gz</c>, only the last one should be captured <c>gz</c>, not <c>tar.gz</c>.</p>
    */
    @IncubatingApi
    const val URL_EXTENSION: String = "url.extension"

    /**
    * <p>The <a href="https://www.rfc-editor.org/rfc/rfc3986#section-3.5">URI fragment</a> component</p>
    */
    const val URL_FRAGMENT: String = "url.fragment"

    /**
    * <p>Absolute URL describing a network resource according to <a href="https://www.rfc-editor.org/rfc/rfc3986">RFC3986</a></p>
    * <p>Notes:</p>
    * <p>For network calls, URL usually has <c>scheme://host[:port][path][?query][#fragment]</c> format, where the fragment
    * is not transmitted over HTTP, but if it is known, it SHOULD be included nevertheless.</p>
    * <p><c>url.full</c> MUST NOT contain credentials passed via URL in form of <c>https://username:password@www.example.com/</c>.
    * In such case username and password SHOULD be redacted and attribute's value SHOULD be <c>https://REDACTED:REDACTED@www.example.com/</c>.</p>
    * <p><c>url.full</c> SHOULD capture the absolute URL when it is available (or can be reconstructed).</p>
    * <p>Sensitive content provided in <c>url.full</c> SHOULD be scrubbed when instrumentations can identify it.</p>
    * <p>
    * Query string values for the following keys SHOULD be redacted by default and replaced by the
    * value <c>REDACTED</c>:</p>
    * <ul>
    *   <li><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth"><c>AWSAccessKeyId</c></a></li>
    *   <li><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth"><c>Signature</c></a></li>
    *   <li><a href="https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token"><c>sig</c></a></li>
    *   <li><a href="https://cloud.google.com/storage/docs/access-control/signed-urls"><c>X-Goog-Signature</c></a></li>
    * </ul>
    * <p>This list is subject to change over time.</p>
    * <p>When a query string value is redacted, the query string key SHOULD still be preserved, e.g.
    * <c>https://www.example.com/path?color=blue&sig=REDACTED</c>.</p>
    */
    const val URL_FULL: String = "url.full"

    /**
    * <p>Unmodified original URL as seen in the event source.</p>
    * <p>Notes:</p>
    * <p>In network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path. This field is meant to represent the URL as it was observed, complete or not.
    * <c>url.original</c> might contain credentials passed via URL in form of <c>https://username:password@www.example.com/</c>. In such case password and username SHOULD NOT be redacted and attribute's value SHOULD remain the same.</p>
    */
    @IncubatingApi
    const val URL_ORIGINAL: String = "url.original"

    /**
    * <p>The <a href="https://www.rfc-editor.org/rfc/rfc3986#section-3.3">URI path</a> component</p>
    * <p>Notes:</p>
    * <p>Sensitive content provided in <c>url.path</c> SHOULD be scrubbed when instrumentations can identify it.</p>
    */
    const val URL_PATH: String = "url.path"

    /**
    * <p>Port extracted from the <c>url.full</c></p>
    */
    @IncubatingApi
    const val URL_PORT: String = "url.port"

    /**
    * <p>The <a href="https://www.rfc-editor.org/rfc/rfc3986#section-3.4">URI query</a> component</p>
    * <p>Notes:</p>
    * <p>Sensitive content provided in <c>url.query</c> SHOULD be scrubbed when instrumentations can identify it.</p>
    * <p>
    * Query string values for the following keys SHOULD be redacted by default and replaced by the value <c>REDACTED</c>:</p>
    * <ul>
    *   <li><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth"><c>AWSAccessKeyId</c></a></li>
    *   <li><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth"><c>Signature</c></a></li>
    *   <li><a href="https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token"><c>sig</c></a></li>
    *   <li><a href="https://cloud.google.com/storage/docs/access-control/signed-urls"><c>X-Goog-Signature</c></a></li>
    * </ul>
    * <p>This list is subject to change over time.</p>
    * <p>When a query string value is redacted, the query string key SHOULD still be preserved, e.g.
    * <c>q=OpenTelemetry&sig=REDACTED</c>.</p>
    */
    const val URL_QUERY: String = "url.query"

    /**
    * <p>The highest registered url domain, stripped of the subdomain.</p>
    * <p>Notes:</p>
    * <p>This value can be determined precisely with the <a href="https://publicsuffix.org/">public suffix list</a>. For example, the registered domain for <c>foo.example.com</c> is <c>example.com</c>. Trying to approximate this by simply taking the last two labels will not work well for TLDs such as <c>co.uk</c>.</p>
    */
    @IncubatingApi
    const val URL_REGISTERED_DOMAIN: String = "url.registered_domain"

    /**
    * <p>The <a href="https://www.rfc-editor.org/rfc/rfc3986#section-3.1">URI scheme</a> component identifying the used protocol.</p>
    */
    const val URL_SCHEME: String = "url.scheme"

    /**
    * <p>The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain. In a partially qualified domain, or if the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain.</p>
    * <p>Notes:</p>
    * <p>The subdomain portion of <c>www.east.mydomain.co.uk</c> is <c>east</c>. If the domain has multiple levels of subdomain, such as <c>sub2.sub1.example.com</c>, the subdomain field should contain <c>sub2.sub1</c>, with no trailing period.</p>
    */
    @IncubatingApi
    const val URL_SUBDOMAIN: String = "url.subdomain"

    /**
    * <p>The low-cardinality template of an <a href="https://www.rfc-editor.org/rfc/rfc3986#section-4.2">absolute path reference</a>.</p>
    */
    @IncubatingApi
    const val URL_TEMPLATE: String = "url.template"

    /**
    * <p>The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is <c>com</c>.</p>
    * <p>Notes:</p>
    * <p>This value can be determined precisely with the <a href="https://publicsuffix.org/">public suffix list</a>.</p>
    */
    @IncubatingApi
    const val URL_TOP_LEVEL_DOMAIN: String = "url.top_level_domain"
}
