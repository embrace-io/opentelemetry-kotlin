package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for 'network'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object NetworkAttributes {
  

    /**
    * <p>The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.</p>
    */
    @IncubatingApi
    const val NETWORK_CARRIER_ICC: String = "network.carrier.icc"

    /**
    * <p>The mobile carrier country code.</p>
    */
    @IncubatingApi
    const val NETWORK_CARRIER_MCC: String = "network.carrier.mcc"

    /**
    * <p>The mobile carrier network code.</p>
    */
    @IncubatingApi
    const val NETWORK_CARRIER_MNC: String = "network.carrier.mnc"

    /**
    * <p>The name of the mobile carrier.</p>
    */
    @IncubatingApi
    const val NETWORK_CARRIER_NAME: String = "network.carrier.name"

    /**
    * <p>The state of network connection</p>
    * <p>Notes:</p>
    * <p>Connection states are defined as part of the <a href="https://datatracker.ietf.org/doc/html/rfc9293#section-3.3.2">rfc9293</a></p>
    */
    @IncubatingApi
    const val NETWORK_CONNECTION_STATE: String = "network.connection.state"

    /**
    * <p>This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.</p>
    */
    @IncubatingApi
    const val NETWORK_CONNECTION_SUBTYPE: String = "network.connection.subtype"

    /**
    * <p>The internet connection type.</p>
    */
    @IncubatingApi
    const val NETWORK_CONNECTION_TYPE: String = "network.connection.type"

    /**
    * <p>The network interface name.</p>
    */
    @IncubatingApi
    const val NETWORK_INTERFACE_NAME: String = "network.interface.name"

    /**
    * <p>The network IO operation direction.</p>
    */
    @IncubatingApi
    const val NETWORK_IO_DIRECTION: String = "network.io.direction"

    /**
    * <p>Local address of the network connection - IP address or Unix domain socket name.</p>
    */
    const val NETWORK_LOCAL_ADDRESS: String = "network.local.address"

    /**
    * <p>Local port number of the network connection.</p>
    */
    const val NETWORK_LOCAL_PORT: String = "network.local.port"

    /**
    * <p>Peer address of the network connection - IP address or Unix domain socket name.</p>
    */
    const val NETWORK_PEER_ADDRESS: String = "network.peer.address"

    /**
    * <p>Peer port number of the network connection.</p>
    */
    const val NETWORK_PEER_PORT: String = "network.peer.port"

    /**
    * <p><a href="https://wikipedia.org/wiki/Application_layer">OSI application layer</a> or non-OSI equivalent.</p>
    * <p>Notes:</p>
    * <p>The value SHOULD be normalized to lowercase.</p>
    */
    const val NETWORK_PROTOCOL_NAME: String = "network.protocol.name"

    /**
    * <p>The actual version of the protocol used for network communication.</p>
    * <p>Notes:</p>
    * <p>If protocol version is subject to negotiation (for example using <a href="https://www.rfc-editor.org/rfc/rfc7301.html">ALPN</a>), this attribute SHOULD be set to the negotiated version. If the actual protocol version is not known, this attribute SHOULD NOT be set.</p>
    */
    const val NETWORK_PROTOCOL_VERSION: String = "network.protocol.version"

    /**
    * <p><a href="https://wikipedia.org/wiki/Transport_layer">OSI transport layer</a> or <a href="https://wikipedia.org/wiki/Inter-process_communication">inter-process communication method</a>.</p>
    * <p>Notes:</p>
    * <p>The value SHOULD be normalized to lowercase.</p>
    * <p>Consider always setting the transport when setting a port number, since
    * a port number is ambiguous without knowing the transport. For example
    * different processes could be listening on TCP port 12345 and UDP port 12345.</p>
    */
    const val NETWORK_TRANSPORT: String = "network.transport"

    /**
    * <p><a href="https://wikipedia.org/wiki/Network_layer">OSI network layer</a> or non-OSI equivalent.</p>
    * <p>Notes:</p>
    * <p>The value SHOULD be normalized to lowercase.</p>
    */
    const val NETWORK_TYPE: String = "network.type"

    /**
    * <p>NETWORK_CONNECTION_STATE</p>
    */
    @IncubatingApi
    enum class NetworkConnectionStateValues(val value: String) {

        /**
        * <p>closed.</p>
        */
        CLOSED("closed"),

        /**
        * <p>close_wait.</p>
        */
        CLOSE_WAIT("close_wait"),

        /**
        * <p>closing.</p>
        */
        CLOSING("closing"),

        /**
        * <p>established.</p>
        */
        ESTABLISHED("established"),

        /**
        * <p>fin_wait_1.</p>
        */
        FIN_WAIT_1("fin_wait_1"),

        /**
        * <p>fin_wait_2.</p>
        */
        FIN_WAIT_2("fin_wait_2"),

        /**
        * <p>last_ack.</p>
        */
        LAST_ACK("last_ack"),

        /**
        * <p>listen.</p>
        */
        LISTEN("listen"),

        /**
        * <p>syn_received.</p>
        */
        SYN_RECEIVED("syn_received"),

        /**
        * <p>syn_sent.</p>
        */
        SYN_SENT("syn_sent"),

        /**
        * <p>time_wait.</p>
        */
        TIME_WAIT("time_wait"),
    }

    /**
    * <p>NETWORK_CONNECTION_SUBTYPE</p>
    */
    @IncubatingApi
    enum class NetworkConnectionSubtypeValues(val value: String) {

        /**
        * <p>GPRS</p>
        */
        GPRS("gprs"),

        /**
        * <p>EDGE</p>
        */
        EDGE("edge"),

        /**
        * <p>UMTS</p>
        */
        UMTS("umts"),

        /**
        * <p>CDMA</p>
        */
        CDMA("cdma"),

        /**
        * <p>EVDO Rel. 0</p>
        */
        EVDO_0("evdo_0"),

        /**
        * <p>EVDO Rev. A</p>
        */
        EVDO_A("evdo_a"),

        /**
        * <p>CDMA2000 1XRTT</p>
        */
        CDMA2000_1XRTT("cdma2000_1xrtt"),

        /**
        * <p>HSDPA</p>
        */
        HSDPA("hsdpa"),

        /**
        * <p>HSUPA</p>
        */
        HSUPA("hsupa"),

        /**
        * <p>HSPA</p>
        */
        HSPA("hspa"),

        /**
        * <p>IDEN</p>
        */
        IDEN("iden"),

        /**
        * <p>EVDO Rev. B</p>
        */
        EVDO_B("evdo_b"),

        /**
        * <p>LTE</p>
        */
        LTE("lte"),

        /**
        * <p>EHRPD</p>
        */
        EHRPD("ehrpd"),

        /**
        * <p>HSPAP</p>
        */
        HSPAP("hspap"),

        /**
        * <p>GSM</p>
        */
        GSM("gsm"),

        /**
        * <p>TD-SCDMA</p>
        */
        TD_SCDMA("td_scdma"),

        /**
        * <p>IWLAN</p>
        */
        IWLAN("iwlan"),

        /**
        * <p>5G NR (New Radio)</p>
        */
        NR("nr"),

        /**
        * <p>5G NRNSA (New Radio Non-Standalone)</p>
        */
        NRNSA("nrnsa"),

        /**
        * <p>LTE CA</p>
        */
        LTE_CA("lte_ca"),
    }

    /**
    * <p>NETWORK_CONNECTION_TYPE</p>
    */
    @IncubatingApi
    enum class NetworkConnectionTypeValues(val value: String) {

        /**
        * <p>wifi.</p>
        */
        WIFI("wifi"),

        /**
        * <p>wired.</p>
        */
        WIRED("wired"),

        /**
        * <p>cell.</p>
        */
        CELL("cell"),

        /**
        * <p>unavailable.</p>
        */
        UNAVAILABLE("unavailable"),

        /**
        * <p>unknown.</p>
        */
        UNKNOWN("unknown"),
    }

    /**
    * <p>NETWORK_IO_DIRECTION</p>
    */
    @IncubatingApi
    enum class NetworkIoDirectionValues(val value: String) {

        /**
        * <p>transmit.</p>
        */
        TRANSMIT("transmit"),

        /**
        * <p>receive.</p>
        */
        RECEIVE("receive"),
    }

    /**
    * <p>NETWORK_TRANSPORT</p>
    */
    enum class NetworkTransportValues(val value: String) {

        /**
        * <p>TCP</p>
        */
        TCP("tcp"),

        /**
        * <p>UDP</p>
        */
        UDP("udp"),

        /**
        * <p>Named or anonymous pipe.</p>
        */
        PIPE("pipe"),

        /**
        * <p>Unix domain socket</p>
        */
        UNIX("unix"),

        /**
        * <p>QUIC</p>
        */
        QUIC("quic"),
    }

    /**
    * <p>NETWORK_TYPE</p>
    */
    enum class NetworkTypeValues(val value: String) {

        /**
        * <p>IPv4</p>
        */
        IPV4("ipv4"),

        /**
        * <p>IPv6</p>
        */
        IPV6("ipv6"),
    }
}
