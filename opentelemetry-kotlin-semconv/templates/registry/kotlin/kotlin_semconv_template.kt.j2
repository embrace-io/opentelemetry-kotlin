{%- set my_class_name = ctx.root_namespace | pascal_case ~ "Attributes" -%}

package io.embrace.opentelemetry.kotlin.semconv

/**
 * Autogenerated OpenTelemetry semantic conventions for '{{ctx.root_namespace}}'.
 *
 * DO NOT EDIT - AUTOGENERATED FILE
 */
@Suppress("unused")
object {{ my_class_name }} {
  {% for attribute in ctx.attributes | rejectattr("name", "in", ctx.excluded_attributes) %}

    {{ [attribute.brief, concat_if("\n\nNotes:\n\n", attribute.note)] | comment | indent(4) }}
    {%- if attribute is deprecated %}
    @Deprecated("{{ attribute.deprecated.note | replace('\n', ' ') | trim  }}")
    {%- elif attribute.stability != "stable" %}
    @IncubatingApi
    {%- endif %}
    const val {{ attribute.name | screaming_snake_case }}: String = "{{ attribute.name }}"
  {%- endfor %}

  {%- for attribute in ctx.attributes | rejectattr("name", "in", ctx.excluded_attributes) -%}
    {%- if attribute is enum %}

    {{ attribute.name | screaming_snake_case | comment | indent(4) }}
    {%- if attribute is deprecated %}
    @Deprecated("{{ attribute.deprecated.note | replace('\n', ' ') | trim  }}")
    {%- elif attribute.stability != "stable" %}
    @IncubatingApi
    {%- endif %}
    enum class {{ attribute.name | pascal_case }}Values(val value: {{ attribute.type | instantiated_type | map_text("kotlin_enum_type") }}) {
      {%- for member in attribute.type.members %}

        {{ [member.brief or (member.id ~ '.')] | comment | indent(8) }}
        {{ member.id | screaming_snake_case }}({{ member.value | print_member_value }}),
      {%- endfor %}
    }
    {%- endif -%}
  {%- endfor %}
}

