public abstract interface class io/embrace/opentelemetry/kotlin/Clock {
	public abstract fun now ()J
}

public abstract interface annotation class io/embrace/opentelemetry/kotlin/ExperimentalApi : java/lang/annotation/Annotation {
}

public abstract interface class io/embrace/opentelemetry/kotlin/InstrumentationScopeInfo {
	public abstract fun getAttributes ()Ljava/util/Map;
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getSchemaUrl ()Ljava/lang/String;
	public abstract fun getVersion ()Ljava/lang/String;
}

public abstract interface class io/embrace/opentelemetry/kotlin/OpenTelemetry {
	public abstract fun getClock ()Lio/embrace/opentelemetry/kotlin/Clock;
	public abstract fun getLoggerProvider ()Lio/embrace/opentelemetry/kotlin/logging/LoggerProvider;
	public abstract fun getTracerProvider ()Lio/embrace/opentelemetry/kotlin/tracing/TracerProvider;
}

public final class io/embrace/opentelemetry/kotlin/OpenTelemetryInstance {
	public static final field INSTANCE Lio/embrace/opentelemetry/kotlin/OpenTelemetryInstance;
}

public abstract interface annotation class io/embrace/opentelemetry/kotlin/ThreadSafe : java/lang/annotation/Annotation {
}

public abstract interface class io/embrace/opentelemetry/kotlin/attributes/AttributeContainer {
	public abstract fun attributes ()Ljava/util/Map;
	public abstract fun setBooleanAttribute (Ljava/lang/String;Z)V
	public abstract fun setBooleanListAttribute (Ljava/lang/String;Ljava/util/List;)V
	public abstract fun setDoubleAttribute (Ljava/lang/String;D)V
	public abstract fun setDoubleListAttribute (Ljava/lang/String;Ljava/util/List;)V
	public abstract fun setLongAttribute (Ljava/lang/String;J)V
	public abstract fun setLongListAttribute (Ljava/lang/String;Ljava/util/List;)V
	public abstract fun setStringAttribute (Ljava/lang/String;Ljava/lang/String;)V
	public abstract fun setStringListAttribute (Ljava/lang/String;Ljava/util/List;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/context/Context {
	public static final field Companion Lio/embrace/opentelemetry/kotlin/context/Context$Companion;
	public abstract fun createKey (Ljava/lang/String;)Lio/embrace/opentelemetry/kotlin/context/ContextKey;
	public abstract fun get (Lio/embrace/opentelemetry/kotlin/context/ContextKey;)Ljava/lang/Object;
	public abstract fun set (Lio/embrace/opentelemetry/kotlin/context/ContextKey;Ljava/lang/Object;)Lio/embrace/opentelemetry/kotlin/context/Context;
}

public final class io/embrace/opentelemetry/kotlin/context/Context$Companion {
}

public abstract interface class io/embrace/opentelemetry/kotlin/context/ContextKey {
	public abstract fun getName ()Ljava/lang/String;
}

public abstract class io/embrace/opentelemetry/kotlin/export/OperationResultCode {
}

public final class io/embrace/opentelemetry/kotlin/export/OperationResultCode$Failure : io/embrace/opentelemetry/kotlin/export/OperationResultCode {
	public static final field INSTANCE Lio/embrace/opentelemetry/kotlin/export/OperationResultCode$Failure;
}

public final class io/embrace/opentelemetry/kotlin/export/OperationResultCode$Success : io/embrace/opentelemetry/kotlin/export/OperationResultCode {
	public static final field INSTANCE Lio/embrace/opentelemetry/kotlin/export/OperationResultCode$Success;
}

public abstract interface class io/embrace/opentelemetry/kotlin/export/TelemetryCloseable {
	public abstract fun forceFlush ()Lio/embrace/opentelemetry/kotlin/export/OperationResultCode;
	public abstract fun shutdown ()Lio/embrace/opentelemetry/kotlin/export/OperationResultCode;
}

public abstract interface annotation class io/embrace/opentelemetry/kotlin/init/ConfigDsl : java/lang/annotation/Annotation {
}

public abstract interface class io/embrace/opentelemetry/kotlin/init/LogLimitsConfigDsl {
	public abstract fun getAttributeCountLimit ()I
	public abstract fun getAttributeValueLengthLimit ()I
	public abstract fun setAttributeCountLimit (I)V
	public abstract fun setAttributeValueLengthLimit (I)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/init/LoggerProviderConfigDsl {
	public abstract fun addLogRecordProcessor (Lio/embrace/opentelemetry/kotlin/logging/export/LogRecordProcessor;)V
	public abstract fun logLimits (Lkotlin/jvm/functions/Function1;)V
	public abstract fun resource (Lkotlin/jvm/functions/Function1;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/init/SpanLimitsConfigDsl {
	public abstract fun getAttributeCountLimit ()I
	public abstract fun getAttributeCountPerEventLimit ()I
	public abstract fun getAttributeCountPerLinkLimit ()I
	public abstract fun getEventCountLimit ()I
	public abstract fun getLinkCountLimit ()I
	public abstract fun setAttributeCountLimit (I)V
	public abstract fun setAttributeCountPerEventLimit (I)V
	public abstract fun setAttributeCountPerLinkLimit (I)V
	public abstract fun setEventCountLimit (I)V
	public abstract fun setLinkCountLimit (I)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/init/TracerProviderConfigDsl {
	public abstract fun addSpanProcessor (Lio/embrace/opentelemetry/kotlin/tracing/export/SpanProcessor;)V
	public abstract fun resource (Lkotlin/jvm/functions/Function1;)V
	public abstract fun spanLimits (Lkotlin/jvm/functions/Function1;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/logging/Logger {
	public abstract fun log (Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Lio/embrace/opentelemetry/kotlin/context/Context;Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V
}

public final class io/embrace/opentelemetry/kotlin/logging/Logger$DefaultImpls {
	public static synthetic fun log$default (Lio/embrace/opentelemetry/kotlin/logging/Logger;Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Lio/embrace/opentelemetry/kotlin/context/Context;Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/logging/LoggerProvider {
	public abstract fun getLogger (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Lio/embrace/opentelemetry/kotlin/logging/Logger;
}

public final class io/embrace/opentelemetry/kotlin/logging/LoggerProvider$DefaultImpls {
	public static synthetic fun getLogger$default (Lio/embrace/opentelemetry/kotlin/logging/LoggerProvider;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lio/embrace/opentelemetry/kotlin/logging/Logger;
}

public abstract interface class io/embrace/opentelemetry/kotlin/logging/export/LogRecordExporter : io/embrace/opentelemetry/kotlin/export/TelemetryCloseable {
	public abstract fun export (Ljava/util/List;)Lio/embrace/opentelemetry/kotlin/export/OperationResultCode;
}

public abstract interface class io/embrace/opentelemetry/kotlin/logging/export/LogRecordProcessor : io/embrace/opentelemetry/kotlin/export/TelemetryCloseable {
	public abstract fun onEmit (Lio/embrace/opentelemetry/kotlin/logging/model/ReadWriteLogRecord;Lio/embrace/opentelemetry/kotlin/context/Context;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/logging/model/ReadWriteLogRecord : io/embrace/opentelemetry/kotlin/attributes/AttributeContainer, io/embrace/opentelemetry/kotlin/logging/model/ReadableLogRecord {
	public abstract fun getBody ()Ljava/lang/String;
	public abstract fun getObservedTimestamp ()Ljava/lang/Long;
	public abstract fun getSeverityNumber ()Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public abstract fun getSeverityText ()Ljava/lang/String;
	public abstract fun getSpanContext ()Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;
	public abstract fun getTimestamp ()Ljava/lang/Long;
	public abstract fun setBody (Ljava/lang/String;)V
	public abstract fun setObservedTimestamp (Ljava/lang/Long;)V
	public abstract fun setSeverityNumber (Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;)V
	public abstract fun setSeverityText (Ljava/lang/String;)V
	public abstract fun setSpanContext (Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;)V
	public abstract fun setTimestamp (Ljava/lang/Long;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/logging/model/ReadableLogRecord {
	public abstract fun getAttributes ()Ljava/util/Map;
	public abstract fun getBody ()Ljava/lang/String;
	public abstract fun getContext ()Lio/embrace/opentelemetry/kotlin/context/Context;
	public abstract fun getInstrumentationScopeInfo ()Lio/embrace/opentelemetry/kotlin/InstrumentationScopeInfo;
	public abstract fun getObservedTimestamp ()Ljava/lang/Long;
	public abstract fun getResource ()Lio/embrace/opentelemetry/kotlin/resource/Resource;
	public abstract fun getSeverityNumber ()Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public abstract fun getSeverityText ()Ljava/lang/String;
	public abstract fun getSpanContext ()Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;
	public abstract fun getTimestamp ()Ljava/lang/Long;
}

public final class io/embrace/opentelemetry/kotlin/logging/model/SeverityNumber : java/lang/Enum {
	public static final field DEBUG Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field DEBUG2 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field DEBUG3 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field DEBUG4 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field ERROR Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field ERROR2 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field ERROR3 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field ERROR4 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field FATAL Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field FATAL2 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field FATAL3 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field FATAL4 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field INFO Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field INFO2 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field INFO3 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field INFO4 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field TRACE Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field TRACE2 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field TRACE3 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field TRACE4 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field UNKNOWN Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field WARN Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field WARN2 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field WARN3 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static final field WARN4 Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public final fun getSeverityNumber ()I
	public static fun valueOf (Ljava/lang/String;)Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
	public static fun values ()[Lio/embrace/opentelemetry/kotlin/logging/model/SeverityNumber;
}

public abstract interface class io/embrace/opentelemetry/kotlin/resource/Resource {
	public abstract fun getAttributes ()Ljava/util/Map;
	public abstract fun getSchemaUrl ()Ljava/lang/String;
}

public abstract class io/embrace/opentelemetry/kotlin/tracing/StatusCode {
}

public final class io/embrace/opentelemetry/kotlin/tracing/StatusCode$Error : io/embrace/opentelemetry/kotlin/tracing/StatusCode {
	public fun <init> (Ljava/lang/String;)V
	public final fun getDescription ()Ljava/lang/String;
}

public final class io/embrace/opentelemetry/kotlin/tracing/StatusCode$Ok : io/embrace/opentelemetry/kotlin/tracing/StatusCode {
	public static final field INSTANCE Lio/embrace/opentelemetry/kotlin/tracing/StatusCode$Ok;
}

public final class io/embrace/opentelemetry/kotlin/tracing/StatusCode$Unset : io/embrace/opentelemetry/kotlin/tracing/StatusCode {
	public static final field INSTANCE Lio/embrace/opentelemetry/kotlin/tracing/StatusCode$Unset;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/Tracer {
	public abstract fun createSpan (Ljava/lang/String;Lio/embrace/opentelemetry/kotlin/context/Context;Lio/embrace/opentelemetry/kotlin/tracing/model/SpanKind;Ljava/lang/Long;Lkotlin/jvm/functions/Function1;)Lio/embrace/opentelemetry/kotlin/tracing/model/Span;
}

public final class io/embrace/opentelemetry/kotlin/tracing/Tracer$DefaultImpls {
	public static synthetic fun createSpan$default (Lio/embrace/opentelemetry/kotlin/tracing/Tracer;Ljava/lang/String;Lio/embrace/opentelemetry/kotlin/context/Context;Lio/embrace/opentelemetry/kotlin/tracing/model/SpanKind;Ljava/lang/Long;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lio/embrace/opentelemetry/kotlin/tracing/model/Span;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/TracerProvider {
	public abstract fun getTracer (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Lio/embrace/opentelemetry/kotlin/tracing/Tracer;
}

public final class io/embrace/opentelemetry/kotlin/tracing/TracerProvider$DefaultImpls {
	public static synthetic fun getTracer$default (Lio/embrace/opentelemetry/kotlin/tracing/TracerProvider;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lio/embrace/opentelemetry/kotlin/tracing/Tracer;
}

public abstract interface annotation class io/embrace/opentelemetry/kotlin/tracing/TracingDsl : java/lang/annotation/Annotation {
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/data/EventData {
	public abstract fun getAttributes ()Ljava/util/Map;
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getTimestamp ()J
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/data/LinkData {
	public abstract fun getAttributes ()Ljava/util/Map;
	public abstract fun getSpanContext ()Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/data/SpanData {
	public abstract fun getAttributes ()Ljava/util/Map;
	public abstract fun getEndTimestamp ()Ljava/lang/Long;
	public abstract fun getEvents ()Ljava/util/List;
	public abstract fun getInstrumentationScopeInfo ()Lio/embrace/opentelemetry/kotlin/InstrumentationScopeInfo;
	public abstract fun getLinks ()Ljava/util/List;
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getParent ()Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;
	public abstract fun getResource ()Lio/embrace/opentelemetry/kotlin/resource/Resource;
	public abstract fun getSpanContext ()Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;
	public abstract fun getSpanKind ()Lio/embrace/opentelemetry/kotlin/tracing/model/SpanKind;
	public abstract fun getStartTimestamp ()J
	public abstract fun getStatus ()Lio/embrace/opentelemetry/kotlin/tracing/data/StatusData;
}

public abstract class io/embrace/opentelemetry/kotlin/tracing/data/StatusData {
	public synthetic fun <init> (Lio/embrace/opentelemetry/kotlin/tracing/StatusCode;Ljava/lang/String;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getDescription ()Ljava/lang/String;
	public final fun getStatusCode ()Lio/embrace/opentelemetry/kotlin/tracing/StatusCode;
}

public final class io/embrace/opentelemetry/kotlin/tracing/data/StatusData$Error : io/embrace/opentelemetry/kotlin/tracing/data/StatusData {
	public fun <init> (Ljava/lang/String;)V
}

public final class io/embrace/opentelemetry/kotlin/tracing/data/StatusData$Ok : io/embrace/opentelemetry/kotlin/tracing/data/StatusData {
	public static final field INSTANCE Lio/embrace/opentelemetry/kotlin/tracing/data/StatusData$Ok;
}

public final class io/embrace/opentelemetry/kotlin/tracing/data/StatusData$Unset : io/embrace/opentelemetry/kotlin/tracing/data/StatusData {
	public static final field INSTANCE Lio/embrace/opentelemetry/kotlin/tracing/data/StatusData$Unset;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/export/SpanExporter : io/embrace/opentelemetry/kotlin/export/TelemetryCloseable {
	public abstract fun export (Ljava/util/List;)Lio/embrace/opentelemetry/kotlin/export/OperationResultCode;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/export/SpanProcessor : io/embrace/opentelemetry/kotlin/export/TelemetryCloseable {
	public abstract fun isEndRequired ()Z
	public abstract fun isStartRequired ()Z
	public abstract fun onEnd (Lio/embrace/opentelemetry/kotlin/tracing/model/ReadableSpan;)V
	public abstract fun onStart (Lio/embrace/opentelemetry/kotlin/tracing/model/ReadWriteSpan;Lio/embrace/opentelemetry/kotlin/context/Context;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/model/Link : io/embrace/opentelemetry/kotlin/attributes/AttributeContainer {
	public abstract fun getSpanContext ()Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/model/ReadWriteSpan : io/embrace/opentelemetry/kotlin/tracing/model/ReadableSpan, io/embrace/opentelemetry/kotlin/tracing/model/Span {
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/model/ReadableSpan : io/embrace/opentelemetry/kotlin/tracing/data/SpanData {
	public abstract fun getAttributes ()Ljava/util/Map;
	public abstract fun getEndTimestamp ()Ljava/lang/Long;
	public abstract fun getEvents ()Ljava/util/List;
	public abstract fun getInstrumentationScopeInfo ()Lio/embrace/opentelemetry/kotlin/InstrumentationScopeInfo;
	public abstract fun getLinks ()Ljava/util/List;
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getParent ()Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;
	public abstract fun getResource ()Lio/embrace/opentelemetry/kotlin/resource/Resource;
	public abstract fun getSpanContext ()Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;
	public abstract fun getSpanKind ()Lio/embrace/opentelemetry/kotlin/tracing/model/SpanKind;
	public abstract fun getStartTimestamp ()J
	public abstract fun getStatus ()Lio/embrace/opentelemetry/kotlin/tracing/data/StatusData;
	public abstract fun hasEnded ()Z
	public abstract fun toSpanData ()Lio/embrace/opentelemetry/kotlin/tracing/data/SpanData;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/model/Span : io/embrace/opentelemetry/kotlin/tracing/model/SpanRelationships {
	public static final field Companion Lio/embrace/opentelemetry/kotlin/tracing/model/Span$Companion;
	public abstract fun end ()V
	public abstract fun end (J)V
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getParent ()Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;
	public abstract fun getSpanContext ()Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;
	public abstract fun getSpanKind ()Lio/embrace/opentelemetry/kotlin/tracing/model/SpanKind;
	public abstract fun getStartTimestamp ()J
	public abstract fun getStatus ()Lio/embrace/opentelemetry/kotlin/tracing/data/StatusData;
	public abstract fun isRecording ()Z
	public abstract fun setName (Ljava/lang/String;)V
	public abstract fun setStatus (Lio/embrace/opentelemetry/kotlin/tracing/data/StatusData;)V
}

public final class io/embrace/opentelemetry/kotlin/tracing/model/Span$Companion {
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/model/SpanContext {
	public static final field Companion Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext$Companion;
	public abstract fun getSpanId ()Ljava/lang/String;
	public abstract fun getTraceFlags ()Lio/embrace/opentelemetry/kotlin/tracing/model/TraceFlags;
	public abstract fun getTraceId ()Ljava/lang/String;
	public abstract fun getTraceState ()Lio/embrace/opentelemetry/kotlin/tracing/model/TraceState;
	public abstract fun isRemote ()Z
	public abstract fun isValid ()Z
}

public final class io/embrace/opentelemetry/kotlin/tracing/model/SpanContext$Companion {
}

public final class io/embrace/opentelemetry/kotlin/tracing/model/SpanContextOrigin : java/lang/Enum {
	public static final field LOCAL Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContextOrigin;
	public static final field REMOTE Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContextOrigin;
	public static fun valueOf (Ljava/lang/String;)Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContextOrigin;
	public static fun values ()[Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContextOrigin;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/model/SpanEvent : io/embrace/opentelemetry/kotlin/attributes/AttributeContainer {
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getTimestamp ()J
}

public final class io/embrace/opentelemetry/kotlin/tracing/model/SpanKind : java/lang/Enum {
	public static final field CLIENT Lio/embrace/opentelemetry/kotlin/tracing/model/SpanKind;
	public static final field CONSUMER Lio/embrace/opentelemetry/kotlin/tracing/model/SpanKind;
	public static final field INTERNAL Lio/embrace/opentelemetry/kotlin/tracing/model/SpanKind;
	public static final field PRODUCER Lio/embrace/opentelemetry/kotlin/tracing/model/SpanKind;
	public static final field SERVER Lio/embrace/opentelemetry/kotlin/tracing/model/SpanKind;
	public static fun valueOf (Ljava/lang/String;)Lio/embrace/opentelemetry/kotlin/tracing/model/SpanKind;
	public static fun values ()[Lio/embrace/opentelemetry/kotlin/tracing/model/SpanKind;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/model/SpanRelationships : io/embrace/opentelemetry/kotlin/attributes/AttributeContainer {
	public abstract fun addEvent (Ljava/lang/String;Ljava/lang/Long;Lkotlin/jvm/functions/Function1;)V
	public abstract fun addLink (Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;Lkotlin/jvm/functions/Function1;)V
	public abstract fun events ()Ljava/util/List;
	public abstract fun links ()Ljava/util/List;
}

public final class io/embrace/opentelemetry/kotlin/tracing/model/SpanRelationships$DefaultImpls {
	public static synthetic fun addEvent$default (Lio/embrace/opentelemetry/kotlin/tracing/model/SpanRelationships;Ljava/lang/String;Ljava/lang/Long;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V
	public static synthetic fun addLink$default (Lio/embrace/opentelemetry/kotlin/tracing/model/SpanRelationships;Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/model/TraceFlags {
	public static final field Companion Lio/embrace/opentelemetry/kotlin/tracing/model/TraceFlags$Companion;
	public abstract fun getHex ()Ljava/lang/String;
	public abstract fun isRandom ()Z
	public abstract fun isSampled ()Z
}

public final class io/embrace/opentelemetry/kotlin/tracing/model/TraceFlags$Companion {
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/model/TraceState {
	public static final field Companion Lio/embrace/opentelemetry/kotlin/tracing/model/TraceState$Companion;
	public abstract fun asMap ()Ljava/util/Map;
	public abstract fun get (Ljava/lang/String;)Ljava/lang/String;
}

public final class io/embrace/opentelemetry/kotlin/tracing/model/TraceState$Companion {
}

