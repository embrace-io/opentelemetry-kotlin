public abstract interface class io/embrace/opentelemetry/kotlin/Clock {
	public abstract fun now ()J
}

public abstract interface annotation class io/embrace/opentelemetry/kotlin/ExperimentalApi : java/lang/annotation/Annotation {
}

public abstract interface class io/embrace/opentelemetry/kotlin/OpenTelemetry {
	public abstract fun getLoggerProvider ()Lio/embrace/opentelemetry/kotlin/logging/LoggerProvider;
	public abstract fun getTracerProvider ()Lio/embrace/opentelemetry/kotlin/tracing/TracerProvider;
}

public abstract class io/embrace/opentelemetry/kotlin/StatusCode {
}

public final class io/embrace/opentelemetry/kotlin/StatusCode$Error : io/embrace/opentelemetry/kotlin/StatusCode {
	public fun <init> (Ljava/lang/String;)V
	public final fun getDescription ()Ljava/lang/String;
}

public final class io/embrace/opentelemetry/kotlin/StatusCode$Ok : io/embrace/opentelemetry/kotlin/StatusCode {
	public static final field INSTANCE Lio/embrace/opentelemetry/kotlin/StatusCode$Ok;
}

public final class io/embrace/opentelemetry/kotlin/StatusCode$Unset : io/embrace/opentelemetry/kotlin/StatusCode {
	public static final field INSTANCE Lio/embrace/opentelemetry/kotlin/StatusCode$Unset;
}

public abstract interface annotation class io/embrace/opentelemetry/kotlin/ThreadSafe : java/lang/annotation/Annotation {
}

public abstract interface class io/embrace/opentelemetry/kotlin/attributes/AttributeContainer {
	public abstract fun attributes ()Ljava/util/Map;
	public abstract fun setBooleanAttribute (Ljava/lang/String;Z)V
	public abstract fun setBooleanListAttribute (Ljava/lang/String;Ljava/util/List;)V
	public abstract fun setDoubleAttribute (Ljava/lang/String;D)V
	public abstract fun setDoubleListAttribute (Ljava/lang/String;Ljava/util/List;)V
	public abstract fun setLongAttribute (Ljava/lang/String;J)V
	public abstract fun setLongListAttribute (Ljava/lang/String;Ljava/util/List;)V
	public abstract fun setStringAttribute (Ljava/lang/String;Ljava/lang/String;)V
	public abstract fun setStringListAttribute (Ljava/lang/String;Ljava/util/List;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/context/Context {
	public abstract fun createKey (Ljava/lang/String;)Lio/embrace/opentelemetry/kotlin/context/ContextKey;
	public abstract fun getValue (Lio/embrace/opentelemetry/kotlin/context/ContextKey;)Ljava/lang/Object;
	public abstract fun setValue (Lio/embrace/opentelemetry/kotlin/context/ContextKey;Ljava/lang/Object;)Lio/embrace/opentelemetry/kotlin/context/Context;
}

public abstract interface class io/embrace/opentelemetry/kotlin/context/ContextKey {
	public abstract fun getName ()Ljava/lang/String;
}

public abstract interface class io/embrace/opentelemetry/kotlin/logging/LogRecord : io/embrace/opentelemetry/kotlin/attributes/AttributeContainer {
	public abstract fun getBody ()Ljava/lang/String;
	public abstract fun getContext ()Lio/embrace/opentelemetry/kotlin/context/Context;
	public abstract fun getObservedTimestampNs ()Ljava/lang/Long;
	public abstract fun getSeverityNumber ()Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public abstract fun getSeverityText ()Ljava/lang/String;
	public abstract fun getTimestampNs ()Ljava/lang/Long;
}

public abstract interface class io/embrace/opentelemetry/kotlin/logging/Logger {
	public abstract fun log (Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Lio/embrace/opentelemetry/kotlin/context/Context;Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)V
}

public final class io/embrace/opentelemetry/kotlin/logging/Logger$DefaultImpls {
	public static synthetic fun log$default (Lio/embrace/opentelemetry/kotlin/logging/Logger;Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Long;Lio/embrace/opentelemetry/kotlin/context/Context;Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/logging/LoggerProvider {
	public abstract fun getLogger (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Lio/embrace/opentelemetry/kotlin/logging/Logger;
}

public final class io/embrace/opentelemetry/kotlin/logging/LoggerProvider$DefaultImpls {
	public static synthetic fun getLogger$default (Lio/embrace/opentelemetry/kotlin/logging/LoggerProvider;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lio/embrace/opentelemetry/kotlin/logging/Logger;
}

public final class io/embrace/opentelemetry/kotlin/logging/SeverityNumber : java/lang/Enum {
	public static final field DEBUG Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field DEBUG2 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field DEBUG3 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field DEBUG4 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field ERROR Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field ERROR2 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field ERROR3 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field ERROR4 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field FATAL Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field FATAL2 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field FATAL3 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field FATAL4 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field INFO Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field INFO2 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field INFO3 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field INFO4 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field TRACE Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field TRACE2 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field TRACE3 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field TRACE4 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field UNKNOWN Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field WARN Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field WARN2 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field WARN3 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static final field WARN4 Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public final fun getSeverityNumber ()I
	public static fun valueOf (Ljava/lang/String;)Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
	public static fun values ()[Lio/embrace/opentelemetry/kotlin/logging/SeverityNumber;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/Link : io/embrace/opentelemetry/kotlin/attributes/AttributeContainer {
	public abstract fun getSpanContext ()Lio/embrace/opentelemetry/kotlin/tracing/SpanContext;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/Span : io/embrace/opentelemetry/kotlin/tracing/SpanRelationshipContainer {
	public abstract fun end ()V
	public abstract fun end (J)V
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getParent ()Lio/embrace/opentelemetry/kotlin/tracing/SpanContext;
	public abstract fun getSpanContext ()Lio/embrace/opentelemetry/kotlin/tracing/SpanContext;
	public abstract fun getStatus ()Lio/embrace/opentelemetry/kotlin/StatusCode;
	public abstract fun isRecording ()Z
	public abstract fun setName (Ljava/lang/String;)V
	public abstract fun setStatus (Lio/embrace/opentelemetry/kotlin/StatusCode;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/SpanContext {
	public abstract fun getSpanId ()Ljava/lang/String;
	public abstract fun getTraceFlags ()Lio/embrace/opentelemetry/kotlin/tracing/TraceFlags;
	public abstract fun getTraceId ()Ljava/lang/String;
	public abstract fun getTraceState ()Lio/embrace/opentelemetry/kotlin/tracing/TraceState;
	public abstract fun isRemote ()Z
	public abstract fun isValid ()Z
}

public final class io/embrace/opentelemetry/kotlin/tracing/SpanContextOrigin : java/lang/Enum {
	public static final field LOCAL Lio/embrace/opentelemetry/kotlin/tracing/SpanContextOrigin;
	public static final field REMOTE Lio/embrace/opentelemetry/kotlin/tracing/SpanContextOrigin;
	public static fun valueOf (Ljava/lang/String;)Lio/embrace/opentelemetry/kotlin/tracing/SpanContextOrigin;
	public static fun values ()[Lio/embrace/opentelemetry/kotlin/tracing/SpanContextOrigin;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/SpanEvent : io/embrace/opentelemetry/kotlin/attributes/AttributeContainer {
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getTimestamp ()J
}

public final class io/embrace/opentelemetry/kotlin/tracing/SpanKind : java/lang/Enum {
	public static final field CLIENT Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
	public static final field CONSUMER Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
	public static final field INTERNAL Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
	public static final field PRODUCER Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
	public static final field SERVER Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
	public static fun valueOf (Ljava/lang/String;)Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
	public static fun values ()[Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/SpanRelationshipContainer : io/embrace/opentelemetry/kotlin/attributes/AttributeContainer {
	public abstract fun addEvent (Ljava/lang/String;Ljava/lang/Long;Lkotlin/jvm/functions/Function1;)V
	public abstract fun addLink (Lio/embrace/opentelemetry/kotlin/tracing/SpanContext;Lkotlin/jvm/functions/Function1;)V
	public abstract fun events ()Ljava/util/List;
	public abstract fun links ()Ljava/util/List;
}

public final class io/embrace/opentelemetry/kotlin/tracing/SpanRelationshipContainer$DefaultImpls {
	public static synthetic fun addEvent$default (Lio/embrace/opentelemetry/kotlin/tracing/SpanRelationshipContainer;Ljava/lang/String;Ljava/lang/Long;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/TraceFlags {
	public abstract fun isRandom ()Z
	public abstract fun isSampled ()Z
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/TraceState {
	public abstract fun asMap ()Ljava/util/Map;
	public abstract fun get (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/TraceStateMutator {
	public abstract fun put (Ljava/lang/String;Ljava/lang/String;)V
	public abstract fun remove (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/Tracer {
	public abstract fun createSpan (Ljava/lang/String;Lio/embrace/opentelemetry/kotlin/tracing/SpanContext;Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;Ljava/lang/Long;Lkotlin/jvm/functions/Function1;)Lio/embrace/opentelemetry/kotlin/tracing/Span;
}

public final class io/embrace/opentelemetry/kotlin/tracing/Tracer$DefaultImpls {
	public static synthetic fun createSpan$default (Lio/embrace/opentelemetry/kotlin/tracing/Tracer;Ljava/lang/String;Lio/embrace/opentelemetry/kotlin/tracing/SpanContext;Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;Ljava/lang/Long;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lio/embrace/opentelemetry/kotlin/tracing/Span;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/TracerProvider {
	public abstract fun getTracer (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lkotlin/jvm/functions/Function1;)Lio/embrace/opentelemetry/kotlin/tracing/Tracer;
}

public final class io/embrace/opentelemetry/kotlin/tracing/TracerProvider$DefaultImpls {
	public static synthetic fun getTracer$default (Lio/embrace/opentelemetry/kotlin/tracing/TracerProvider;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lio/embrace/opentelemetry/kotlin/tracing/Tracer;
}

public abstract interface annotation class io/embrace/opentelemetry/kotlin/tracing/TracingDsl : java/lang/annotation/Annotation {
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/TracingFactory {
	public abstract fun createSpanContext (Ljava/lang/String;Ljava/lang/String;Lio/embrace/opentelemetry/kotlin/tracing/TraceFlags;Lio/embrace/opentelemetry/kotlin/tracing/TraceState;Lio/embrace/opentelemetry/kotlin/tracing/SpanContextOrigin;)Lio/embrace/opentelemetry/kotlin/tracing/SpanContext;
}

public final class io/embrace/opentelemetry/kotlin/tracing/TracingFactory$DefaultImpls {
	public static synthetic fun createSpanContext$default (Lio/embrace/opentelemetry/kotlin/tracing/TracingFactory;Ljava/lang/String;Ljava/lang/String;Lio/embrace/opentelemetry/kotlin/tracing/TraceFlags;Lio/embrace/opentelemetry/kotlin/tracing/TraceState;Lio/embrace/opentelemetry/kotlin/tracing/SpanContextOrigin;ILjava/lang/Object;)Lio/embrace/opentelemetry/kotlin/tracing/SpanContext;
}

