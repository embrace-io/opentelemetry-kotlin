public abstract class io/embrace/opentelemetry/kotlin/StatusCode {
}

public final class io/embrace/opentelemetry/kotlin/StatusCode$Error : io/embrace/opentelemetry/kotlin/StatusCode {
	public fun <init> (Ljava/lang/String;)V
	public final fun getDescription ()Ljava/lang/String;
}

public final class io/embrace/opentelemetry/kotlin/StatusCode$Ok : io/embrace/opentelemetry/kotlin/StatusCode {
	public static final field INSTANCE Lio/embrace/opentelemetry/kotlin/StatusCode$Ok;
}

public final class io/embrace/opentelemetry/kotlin/StatusCode$Unset : io/embrace/opentelemetry/kotlin/StatusCode {
	public static final field INSTANCE Lio/embrace/opentelemetry/kotlin/StatusCode$Unset;
}

public abstract interface class io/embrace/opentelemetry/kotlin/attributes/AttributeContainer {
	public abstract fun setBooleanAttribute (Ljava/lang/String;Z)V
	public abstract fun setBooleanListAttribute (Ljava/lang/String;Ljava/util/List;)V
	public abstract fun setDoubleAttribute (Ljava/lang/String;D)V
	public abstract fun setDoubleListAttribute (Ljava/lang/String;Ljava/util/List;)V
	public abstract fun setLongAttribute (Ljava/lang/String;J)V
	public abstract fun setLongListAttribute (Ljava/lang/String;Ljava/util/List;)V
	public abstract fun setStringAttribute (Ljava/lang/String;Ljava/lang/String;)V
	public abstract fun setStringListAttribute (Ljava/lang/String;Ljava/util/List;)V
}

public final class io/embrace/opentelemetry/kotlin/print/CustomPrintAndroidKt {
	public static final fun getMessage ()Ljava/lang/String;
}

public final class io/embrace/opentelemetry/kotlin/print/CustomPrintKt {
	public static final fun printPlatformString ()V
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/Link : io/embrace/opentelemetry/kotlin/attributes/AttributeContainer {
	public abstract fun getSpanContext ()Lio/embrace/opentelemetry/kotlin/tracing/SpanContext;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/Span : io/embrace/opentelemetry/kotlin/tracing/SpanRelationshipContainer, java/lang/AutoCloseable {
	public abstract fun end (Ljava/lang/Long;Ljava/util/concurrent/TimeUnit;)V
	public abstract fun getName ()Ljava/lang/String;
	public abstract fun getParent ()Lio/embrace/opentelemetry/kotlin/tracing/SpanContext;
	public abstract fun getSpanKind ()Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
	public abstract fun getStatus ()Lio/embrace/opentelemetry/kotlin/StatusCode;
	public abstract fun isRecording ()Z
	public abstract fun setName (Ljava/lang/String;)V
	public abstract fun setParent (Lio/embrace/opentelemetry/kotlin/tracing/SpanContext;)V
	public abstract fun setSpanKind (Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;)V
	public abstract fun setStatus (Lio/embrace/opentelemetry/kotlin/StatusCode;)V
	public abstract fun updateStartTimestamp (JLjava/util/concurrent/TimeUnit;)V
}

public final class io/embrace/opentelemetry/kotlin/tracing/Span$DefaultImpls {
	public static synthetic fun end$default (Lio/embrace/opentelemetry/kotlin/tracing/Span;Ljava/lang/Long;Ljava/util/concurrent/TimeUnit;ILjava/lang/Object;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/SpanContext {
	public abstract fun getSpanId ()Ljava/lang/String;
	public abstract fun getTraceFlags ()Lio/embrace/opentelemetry/kotlin/tracing/TraceFlags;
	public abstract fun getTraceId ()Ljava/lang/String;
	public abstract fun getTraceState ()Lio/embrace/opentelemetry/kotlin/tracing/TraceState;
	public abstract fun isRemote ()Z
	public abstract fun isValid ()Z
	public abstract fun updateTraceState (Lkotlin/jvm/functions/Function1;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/SpanEvent : io/embrace/opentelemetry/kotlin/attributes/AttributeContainer {
}

public final class io/embrace/opentelemetry/kotlin/tracing/SpanKind : java/lang/Enum {
	public static final field CLIENT Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
	public static final field CONSUMER Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
	public static final field INTERNAL Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
	public static final field PRODUCER Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
	public static final field SERVER Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
	public static fun valueOf (Ljava/lang/String;)Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
	public static fun values ()[Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/SpanRelationshipContainer : io/embrace/opentelemetry/kotlin/attributes/AttributeContainer {
	public abstract fun addEvent (Ljava/lang/String;Ljava/lang/Long;Lkotlin/jvm/functions/Function1;)V
	public abstract fun addLink (Lio/embrace/opentelemetry/kotlin/tracing/SpanContext;Lkotlin/jvm/functions/Function1;)V
}

public final class io/embrace/opentelemetry/kotlin/tracing/SpanRelationshipContainer$DefaultImpls {
	public static synthetic fun addEvent$default (Lio/embrace/opentelemetry/kotlin/tracing/SpanRelationshipContainer;Ljava/lang/String;Ljava/lang/Long;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)V
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/TraceFlags {
	public abstract fun isRandom ()Z
	public abstract fun isSampled ()Z
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/TraceState {
	public abstract fun get (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/TraceStateMutator {
	public abstract fun put (Ljava/lang/String;Ljava/lang/String;)V
	public abstract fun remove (Ljava/lang/String;)Ljava/lang/String;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/Tracer {
	public abstract fun createSpan (Ljava/lang/String;Lio/embrace/opentelemetry/kotlin/tracing/SpanContext;Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;JLkotlin/jvm/functions/Function1;)Lio/embrace/opentelemetry/kotlin/tracing/Span;
}

public final class io/embrace/opentelemetry/kotlin/tracing/Tracer$DefaultImpls {
	public static synthetic fun createSpan$default (Lio/embrace/opentelemetry/kotlin/tracing/Tracer;Ljava/lang/String;Lio/embrace/opentelemetry/kotlin/tracing/SpanContext;Lio/embrace/opentelemetry/kotlin/tracing/SpanKind;JLkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lio/embrace/opentelemetry/kotlin/tracing/Span;
}

public abstract interface class io/embrace/opentelemetry/kotlin/tracing/TracerProvider {
	public abstract fun getTracer (Ljava/lang/String;Ljava/lang/String;)Lio/embrace/opentelemetry/kotlin/tracing/Tracer;
}

public final class io/embrace/opentelemetry/kotlin/tracing/TracerProvider$DefaultImpls {
	public static synthetic fun getTracer$default (Lio/embrace/opentelemetry/kotlin/tracing/TracerProvider;Ljava/lang/String;Ljava/lang/String;ILjava/lang/Object;)Lio/embrace/opentelemetry/kotlin/tracing/Tracer;
}

public abstract interface annotation class io/embrace/opentelemetry/kotlin/tracing/TracingDsl : java/lang/annotation/Annotation {
}

