public final class io/embrace/opentelemetry/kotlin/OpenTelemetryInstanceJ2KKt {
	public static final fun compatWithOtelKotlin (Lio/embrace/opentelemetry/kotlin/OpenTelemetryInstance;Lio/embrace/opentelemetry/kotlin/OpenTelemetry;)Lio/opentelemetry/api/OpenTelemetry;
}

public final class io/embrace/opentelemetry/kotlin/OpenTelemetryInstanceK2JKt {
	public static final fun compatWithOtelJava (Lio/embrace/opentelemetry/kotlin/OpenTelemetryInstance;Lio/opentelemetry/api/OpenTelemetry;)Lio/embrace/opentelemetry/kotlin/OpenTelemetry;
	public static final fun kotlinApi (Lio/embrace/opentelemetry/kotlin/OpenTelemetryInstance;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lio/embrace/opentelemetry/kotlin/Clock;)Lio/embrace/opentelemetry/kotlin/OpenTelemetry;
	public static synthetic fun kotlinApi$default (Lio/embrace/opentelemetry/kotlin/OpenTelemetryInstance;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lio/embrace/opentelemetry/kotlin/Clock;ILjava/lang/Object;)Lio/embrace/opentelemetry/kotlin/OpenTelemetry;
}

public final class io/embrace/opentelemetry/kotlin/j2k/logging/export/OtelJavaLogRecordExporterAdapter : io/embrace/opentelemetry/kotlin/logging/export/LogRecordExporter {
	public fun <init> (Lio/opentelemetry/sdk/logs/export/LogRecordExporter;)V
	public fun export (Ljava/util/List;)Lio/embrace/opentelemetry/kotlin/export/OperationResultCode;
	public fun forceFlush ()Lio/embrace/opentelemetry/kotlin/export/OperationResultCode;
	public fun shutdown ()Lio/embrace/opentelemetry/kotlin/export/OperationResultCode;
}

public final class io/embrace/opentelemetry/kotlin/j2k/logging/export/OtelJavaLogRecordProcessorAdapter : io/opentelemetry/sdk/logs/LogRecordProcessor {
	public fun <init> (Lio/embrace/opentelemetry/kotlin/logging/export/LogRecordProcessor;)V
	public fun onEmit (Lio/opentelemetry/context/Context;Lio/opentelemetry/sdk/logs/ReadWriteLogRecord;)V
}

public final class io/embrace/opentelemetry/kotlin/j2k/tracing/OtelJavaSpanKindConversionKt {
	public static final fun convertToOtelKotlin (Lio/opentelemetry/api/trace/SpanKind;)Lio/embrace/opentelemetry/kotlin/tracing/model/SpanKind;
}

public final class io/embrace/opentelemetry/kotlin/j2k/tracing/export/OtelJavaSpanExporterAdapter : io/embrace/opentelemetry/kotlin/tracing/export/SpanExporter {
	public fun <init> (Lio/opentelemetry/sdk/trace/export/SpanExporter;)V
	public fun export (Ljava/util/List;)Lio/embrace/opentelemetry/kotlin/export/OperationResultCode;
	public fun forceFlush ()Lio/embrace/opentelemetry/kotlin/export/OperationResultCode;
	public fun shutdown ()Lio/embrace/opentelemetry/kotlin/export/OperationResultCode;
}

public final class io/embrace/opentelemetry/kotlin/k2j/context/ContextExtKt {
	public static final fun current (Lio/embrace/opentelemetry/kotlin/context/Context$Companion;)Lio/embrace/opentelemetry/kotlin/context/Context;
	public static final fun root (Lio/embrace/opentelemetry/kotlin/context/Context$Companion;)Lio/embrace/opentelemetry/kotlin/context/Context;
}

public abstract interface class io/embrace/opentelemetry/kotlin/k2j/id/TracingIdGenerator {
	public abstract fun generateSpanId ()Ljava/lang/String;
	public abstract fun generateTraceId ()Ljava/lang/String;
	public abstract fun getInvalidSpanId ()Ljava/lang/String;
	public abstract fun getInvalidTraceId ()Ljava/lang/String;
}

public final class io/embrace/opentelemetry/kotlin/k2j/id/TracingIdGeneratorImpl : io/embrace/opentelemetry/kotlin/k2j/id/TracingIdGenerator {
	public fun <init> ()V
	public fun <init> (Lio/opentelemetry/sdk/trace/IdGenerator;)V
	public synthetic fun <init> (Lio/opentelemetry/sdk/trace/IdGenerator;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun generateSpanId ()Ljava/lang/String;
	public fun generateTraceId ()Ljava/lang/String;
	public fun getInvalidSpanId ()Ljava/lang/String;
	public fun getInvalidTraceId ()Ljava/lang/String;
}

public final class io/embrace/opentelemetry/kotlin/k2j/tracing/SpanContextAdapter : io/embrace/opentelemetry/kotlin/tracing/model/SpanContext {
	public fun <init> (Lio/opentelemetry/api/trace/SpanContext;)V
	public final fun getImpl ()Lio/opentelemetry/api/trace/SpanContext;
	public fun getSpanId ()Ljava/lang/String;
	public fun getTraceFlags ()Lio/embrace/opentelemetry/kotlin/tracing/model/TraceFlags;
	public fun getTraceId ()Ljava/lang/String;
	public fun getTraceState ()Lio/embrace/opentelemetry/kotlin/tracing/model/TraceState;
	public fun isRemote ()Z
	public fun isValid ()Z
}

public final class io/embrace/opentelemetry/kotlin/k2j/tracing/SpanContextOtelJavaConverterKt {
	public static final fun convertToOtelJava (Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;)Lio/opentelemetry/api/trace/SpanContext;
}

public final class io/embrace/opentelemetry/kotlin/k2j/tracing/StatusCodeConversionKt {
	public static final fun convertToOtelJava (Lio/embrace/opentelemetry/kotlin/tracing/StatusCode;)Lio/opentelemetry/api/trace/StatusCode;
	public static final fun convertToOtelKotlin (Lio/opentelemetry/api/trace/StatusCode;)Lio/embrace/opentelemetry/kotlin/tracing/StatusCode;
}

public final class io/embrace/opentelemetry/kotlin/k2j/tracing/TracerAdapter : io/embrace/opentelemetry/kotlin/tracing/Tracer {
	public fun <init> (Lio/opentelemetry/api/trace/Tracer;Lio/embrace/opentelemetry/kotlin/Clock;)V
	public fun createSpan (Ljava/lang/String;Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;Lio/embrace/opentelemetry/kotlin/tracing/model/SpanKind;Ljava/lang/Long;Lkotlin/jvm/functions/Function1;)Lio/embrace/opentelemetry/kotlin/tracing/model/Span;
}

public final class io/embrace/opentelemetry/kotlin/k2j/tracing/model/SpanContextExtKt {
	public static final fun create (Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext$Companion;Ljava/lang/String;Ljava/lang/String;Lio/embrace/opentelemetry/kotlin/tracing/model/TraceFlags;Lio/embrace/opentelemetry/kotlin/tracing/model/TraceState;)Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;
	public static final fun invalid (Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext$Companion;)Lio/embrace/opentelemetry/kotlin/tracing/model/SpanContext;
}

public final class io/embrace/opentelemetry/kotlin/k2j/tracing/model/TraceFlagsExtKt {
	public static final fun default (Lio/embrace/opentelemetry/kotlin/tracing/model/TraceFlags$Companion;)Lio/embrace/opentelemetry/kotlin/tracing/model/TraceFlags;
}

public final class io/embrace/opentelemetry/kotlin/k2j/tracing/model/TraceStateExtKt {
	public static final fun default (Lio/embrace/opentelemetry/kotlin/tracing/model/TraceState$Companion;)Lio/embrace/opentelemetry/kotlin/tracing/model/TraceState;
}

